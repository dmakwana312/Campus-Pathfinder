{"version":3,"sources":["logo.svg","utils/firebase.js","utils/userState.js","components/style.js","components/LoginPaper/index.js","components/NavBar/index.js","pages/style.js","pages/HomePage/index.js","components/CreateMapPageNavBar/index.js","components/CreateMapSidebar/index.js","components/CreateMapObjectPropertiesSidebar/index.js","components/EditShape/index.js","components/CreateMapCanvas/index.js","components/CreateMapProgressTracker/index.js","components/ColourPicker/index.js","utils/snapGuidesGeneration.js","utils/categories.js","utils/collisionDetection.js","utils/mapState.js","pages/CreateMapPage/index.js","components/ViewShape/index.js","components/ViewMapCanvas/index.js","components/ViewBuildingModal/index.js","components/CategoryLegend/index.js","components/RouteFinderCarousel/index.js","utils/dijkstra.js","pages/ViewMapPage/index.js","components/AdminMapTable/index.js","pages/AdminPage/index.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","loggedInUser","entity","setUser","user","set","useStyles","makeStyles","theme","content","textAlign","display","root","overflowY","overflowX","canvas","backgroundColor","width","height","createMapHeadingContainer","createMapHeading","propertiesForm","flexWrap","alignItems","justify","propertiesFormDisabled","filter","modalButton","marginTop","propertiesFormDisabledText","position","textField","margin","spacing","marginBottom","justifyContent","positionTextField","borderColor","modalContent","palette","background","paper","border","padding","top","left","transform","viewMapCanvas","overflow","zIndex","paperComponent","createMapAppBar","drawer","list","button","marginRight","cursor","sideBarIcon","color","paperTabs","flexGrow","tab","minWidth","flexShrink","appBar","drawerPaper","formControl","maxWidth","chips","chip","noLabel","centerPaper","right","form","formTextfield","registerText","marginLeft","resetPasswordText","paddingLeft","speedDial","bottom","LoginPaper","classes","useState","showRegisterModal","setShowRegisterModal","showResetPasswordModal","setShowResetPasswordModal","email","setEmail","emailError","setEmailError","password","setPassword","passwordError","setPasswordError","passwordConfirm","setPasswordConfirm","passwordConfirmError","setPasswordConfirmError","resetPasswordEmail","setResetPasswordEmail","resetPasswordEmailError","setResetPasswordEmailError","useEffect","Firebase","auth","onAuthStateChanged","Fragment","use","to","checkLoggedIn","Paper","className","elevation","TextField","id","error","helperText","label","variant","onChange","event","target","value","type","Link","href","onClick","e","preventDefault","Button","style","signInWithEmailAndPassword","catch","code","message","Modal","open","onClose","createUserWithEmailAndPassword","sendPasswordResetEmail","then","alert","NavBar","props","useTheme","isMobile","useMediaQuery","breakpoints","down","drawerOpen","setDrawerOpen","logout","signOut","AppBar","Toolbar","Grid","container","direction","Typography","SwipeableDrawer","onOpen","tabIndex","role","onKeyDown","List","ListItem","divider","window","location","page","HomePage","decrementStep","incrementStep","CreateMapSidebar","Drawer","anchor","drawerContainer","activeStep","buttonClick","ListItemText","primary","disabled","buildingBeingViewed","internalMapOptions","Divider","CreateMapObjectPropertiesSidebar","tabValue","setTabValue","accessibleLiftstairsValues","setAccessibleLiftstairsValues","shapeIndex","setShapeIndex","listClassName","fieldsDisabled","properties","propertiesClassName","index","name","accessible","i","floors","length","push","fieldEdit","propertyName","updateProperty","handleFloorSelect","indexes","parseInt","split","updateLiftStaircaseAccessibility","TabPanel","children","other","hidden","aria-labelledby","Tabs","newValue","indicatorColor","textColor","scrollButtons","Tab","axis","onChangeIndex","deleteSelected","FormControl","InputLabel","Select","multiple","input","Input","renderValue","map","Chip","floor","key","MenuItem","item","x","y","rotation","InputLabelProps","shrink","inputProps","min","fontSize","ToggleButtonGroup","exclusive","aria-label","ToggleButton","FormatAlignLeft","FormatAlignCenter","FormatAlignRight","htmlFor","native","category","categories","showCategoryModal","savedShapes","shape","selected","setBuildingBeingViewed","internal","setFloorBeingViewed","addFloor","EditShape","transformRef","useRef","groupRef","shapeRef","textRef","shapeProps","current","nodes","getLayer","batchDraw","ref","shapePoints","points","draggable","onDragStart","dragStart","onDragMove","dragMove","onDragEnd","dragEnd","onSelect","onTap","onTransformEnd","node","scaleX","scaleY","text","absScale","getAbsoluteScale","updatePropertiesOfShape","Math","updatePoints","fill","shapeColour","fontFamily","fontColour","verticalAlign","align","boundBoxFunc","oldBox","newBox","CreateMapCanvas","stageScale","setStageScale","stageX","setStageX","stageY","setStageY","document","documentElement","clientWidth","clientHeight","stageRef","onMouseDown","checkDeselect","onTouchStart","onWheel","evt","stage","getStage","oldScale","mousePointTo","getPointerPosition","newScale","deltaY","scale","layerRef","shapes","mainColour","closed","floorBeingViewed","displayInternalStructure","guides","guide","stroke","strokeWidth","dash","QontoConnector","withStyles","alternativeLabel","active","completed","line","borderTopWidth","borderRadius","StepConnector","useQontoStepIconStyles","circle","QontoStepIcon","clsx","CreateMapProgressTracker","Stepper","connector","Step","StepLabel","StepIconComponent","ColourPicker","displayColourPicker","setDisplayColourPicker","colour","setColour","console","log","styles","reactCSS","swatch","boxShadow","popover","cover","hex","handleColourChange","getGuides","allShapes","lineGuideStops","skipShape","vertical","horizontal","forEach","box","getClientRect","flat","getLineGuideStops","itemBounds","absolutePosition","round","offset","snap","getObjectSnappingEdges","resultV","resultH","lineGuide","itemBound","diff","abs","minV","sort","a","b","minH","orientation","categoryName","isColliding","shape1","shape2","shape1Points","shape2Points","shape1Edges","generateEdges","shape2Edges","perpendicularStack","dot","aMin","aMax","bMin","bMax","j","edges","setMap","mapToView","CreateMapPage","objectCategories","setObjectCategories","setShapes","setSavedShapes","lineGuides","setLineGuides","selectedIndex","setSelectedIndex","viewCategoryEditModal","setViewCategoryEditModal","viewAddCategoryModal","setViewAddCategoryModal","newCategoryName","setNewCategoryName","newCategoryMainColour","setNewCategoryMainColour","newCategoryFontColour","setNewCategoryFontColour","setActiveStep","mapName","setMapName","editingMap","setEditingMap","mapToEdit","userID","shapeToUpdate","newPoint","rotatePoint","pointX","pointY","originX","originY","angle","PI","cos","sin","propertyValue","editCategory","fieldName","fieldValue","allCategories","lifts","stairs","uid","buildings","pathways","nonCollisionShapes","collision","pathwaysConnected","nonCollisionShapeLabels","step0Validation","liftsConnected","stairsConnected","k","rooms","l","connected","m","step1Validation","shapeType","innerWidth","newShape","entrance","floorNumber","shapesOnCanvas","getChildren","getClassName","lg","shapesArray","buildingKey","clearShapes","floorShapes","concat","floorIndexes","includes","shapesUpdated","aria-describedby","TableContainer","component","Table","table","TableHead","TableRow","TableCell","TableBody","scope","defaultValue","float","newCategory","nowDate","Date","date","getDate","getMonth","getFullYear","mapData","updatedDate","createdDate","chars","result","random","generateCode","db","database","update","ViewShape","mouseHandlerProps","clickHandler","onMouseEnter","onMouseLeave","opacity","ViewMapCanvas","undefined","shapeFill","showingResult","search","origin","destination","pathwayShape","ViewBuildingModal","cols","ceil","sqrt","building","colNumber","handleClose","CategoryLegend","paddingTop","RouteFinderCarousel","pathway","path","internalLevel","buildingIndex","dijkstra_buildingToBuilding","start","finish","shapesToUse","visitedNodesInOrder","unvisitedNodes","allNodes","Infinity","areEqual","findIndex","getAllNodes","sortNodesByDistance","closestNode","shift","updateUnvisitedNeighbours","dijkstra_roomToEntrance","accessibility","getBuildingOfNode","floorToNodes","getBuildingNodes","floorWithEntrance","floorWithNode","currentFloor","sameFloor","getNodesInPathOrder","nodeInPathOrder","currentNode","unshift","unvisitedNeighbours","closestShapes","getClosestShapes","neighbour","distanceComparator","nodeA","nodeB","ViewMapPage","setMapData","setCategories","showTextFields","setShowTextFields","showSearchTextField","setShowSearchTextField","showDirectionTextFields","setShowDirectionTextFields","setSearch","setOrigin","setDestination","setShowingResult","showBuildingModal","setShowBuildingModal","buildingClicked","setBuildingClicked","options","setOptions","showRouteFinderCarousel","setShowRouteFinderCarousel","pathwayShapes","setPathwayShapes","showEnterCodeModal","setShowEnterCodeModal","mapCode","setMapCode","retrieveMapError","setRetrieveMapError","showSearchDrawer","setShowSearchDrawer","setAccessibility","resetShapes","data","textfieldShowHandler","searchFunction","getDirectionsFunction","originFound","destinationFound","visited","nodesInPathwayOrder","originBuilding","destinationBuilding","backButtonHandler","searchDirectionOptions","Fab","icon","faRoute","faChevronCircleLeft","Autocomplete","autoHighlight","getOptionLabel","option","renderOption","renderInput","params","autoComplete","FormControlLabel","control","Checkbox","checked","orderByChild","equalTo","on","snapshot","exists","val","searchOptions","AdminPageTable","allMaps","setAllMaps","redirect","setRedirect","showSpeedDialOptions","setShowSpeedDialOptions","maps","createMapPageRedirect","currentActiveProperty","changeActivePropertyOfMap","Tooltip","title","placement","arrow","editMap","remove","splice","deleteMap","faTrashAlt","SpeedDial","ariaLabel","SpeedDialIcon","SpeedDialAction","tooltipTitle","AdminPage","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1ceee935.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAipzrwFNyQvJiTH5d04RTMwdzNiXfOfSk\",\n    authDomain: \"final-year-project-b1bae.firebaseapp.com\",\n    projectId: \"final-year-project-b1bae\",\n    storageBucket: \"final-year-project-b1bae.appspot.com\",\n    messagingSenderId: \"969475175305\",\n    appId: \"1:969475175305:web:115f57cdcc366118862758\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import { entity } from 'simpler-state';\n\nexport const loggedInUser = entity(null);\n\nexport const setUser = (user) => {\n\n    loggedInUser.set(user);\n\n}","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst drawerWidth = 250;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    // Create map page styling\r\n    content: {\r\n        textAlign: \"center\",\r\n        display: \"inline-block\",\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        overflowY: 'hidden',\r\n        overflowX: 'hidden',\r\n    },\r\n    canvas: {\r\n        backgroundColor: \"#e6e5e3\",\r\n        width: 'calc(100vw - 500px);',\r\n        height: 'calc(100vh - 170px);',\r\n    },\r\n    createMapHeadingContainer: {\r\n        width: 100,\r\n    },\r\n    createMapHeading: {\r\n        width: 100,\r\n    },\r\n    propertiesForm: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        alignItems: \"center\",\r\n        justify: \"center\",\r\n\r\n    },\r\n    propertiesFormDisabled: {\r\n        filter: \"blur(5px)\"\r\n    },\r\n    modalButton: {\r\n        marginTop: 20\r\n    },\r\n    propertiesFormDisabledText: {\r\n        position: \"absolute\",\r\n        textAlign: \"center\"\r\n    },\r\n    textField: {\r\n        margin: theme.spacing(1),\r\n        marginBottom: theme.spacing(0),\r\n        width: '100%',\r\n        justifyContent: 'center',\r\n    },\r\n    positionTextField: {\r\n        width: \"9.7ch\",\r\n        borderColor: \"blue\"\r\n    },\r\n    modalContent: {\r\n        position: 'absolute',\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        padding: theme.spacing(2, 4, 3),\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    },\r\n    //View Map Page Styling\r\n    viewMapCanvas: {\r\n        backgroundColor: \"#e6e5e3\",\r\n        overflow: \"hidden\"\r\n    },\r\n    paper: {\r\n        zIndex: 1000,\r\n        position: 'absolute',\r\n        margin: theme.spacing(1),\r\n        padding: theme.spacing(2),\r\n    },\r\n    paperComponent: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    // Appbar styling\r\n    createMapAppBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        \r\n    },\r\n    list: {\r\n        width: 200,\r\n    },\r\n    button: {\r\n        marginRight: 30,\r\n        cursor: \"pointer\",\r\n    },\r\n    sideBarIcon: {\r\n        padding: 0,\r\n        color: \"white\",\r\n        cursor: \"pointer\",\r\n    },\r\n    paperTabs: {\r\n        flexGrow: 1\r\n    },\r\n    tab: {\r\n        minWidth: 90, // a number of your choice\r\n    },\r\n\r\n    // Sidebar Styling\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        zIndex: theme.zIndex.appBar -1\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n        maxWidth: 300\r\n    },\r\n    chips: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    },\r\n    chip: {\r\n        margin: 2\r\n    },\r\n    noLabel: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n\r\n    // Homepage styling\r\n    centerPaper: {\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        right: \"50%\",\r\n        transform: \"translate(50%,-50%)\",\r\n        margin: theme.spacing(1),\r\n        padding: theme.spacing(2),\r\n    },\r\n    form: {\r\n        width: '30ch',\r\n        margin: theme.spacing(1),\r\n        marginRight: theme.spacing(3),\r\n\r\n    },\r\n    formTextfield: {\r\n        width: '30ch',\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n\r\n    registerText: {\r\n        display: \"block\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        width: \"80%\",\r\n        marginBottom: 10\r\n\r\n    },\r\n    resetPasswordText: {\r\n        display: \"block\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        width: 150,\r\n        paddingLeft: 20\r\n        \r\n        \r\n\r\n    },\r\n\r\n    speedDial: {\r\n        position: \"absolute\",\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2),\r\n    }\r\n\r\n\r\n}));\r\n\r\nexport { useStyles }","import React, { useState, useEffect } from 'react';\n\nimport {\n    Paper,\n    TextField,\n    Link,\n    Modal,\n    Button\n} from '@material-ui/core';\n\nimport { Redirect } from 'react-router-dom';\n\nimport Firebase from '../../utils/firebase';\n\nimport { loggedInUser, setUser } from '../../utils/userState';\n\nimport { useStyles } from '../style.js';\n\nconst LoginPaper = () => {\n\n    const classes = useStyles();\n\n    const [showRegisterModal, setShowRegisterModal] = useState(false);\n    const [showResetPasswordModal, setShowResetPasswordModal] = useState(false);\n\n    const [email, setEmail] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [passwordError, setPasswordError] = useState(\"\");\n    const [passwordConfirm, setPasswordConfirm] = useState(\"\");\n    const [passwordConfirmError, setPasswordConfirmError] = useState(\"\");\n\n    const [resetPasswordEmail, setResetPasswordEmail] = useState(\"\")\n    const [resetPasswordEmailError, setResetPasswordEmailError] = useState(\"\")\n\n    useEffect(() => {\n        setEmailError(\"\");\n        setPasswordError(\"\");\n        setPasswordConfirmError(\"\");\n    }, [showRegisterModal])\n\n    useEffect(() => {\n        authListener();\n    }, [])\n\n    function login() {\n        Firebase.auth()\n            .signInWithEmailAndPassword(email, password)\n            .catch(error => {\n                switch (error.code) {\n                    case \"auth/invalid-email\":\n                    case \"auth/user-disabled\":\n                    case \"auth/user-not-found\":\n                        setEmailError(error.message);\n                        break;\n                    case \"auth/wrong-password\":\n                        setPasswordError(error.message);\n                }\n            });\n\n\n    }\n\n    function authListener() {\n        Firebase.auth().onAuthStateChanged(user => {\n            if (user) {\n                setUser(user);\n            }\n            else {\n                setUser(null);\n            }\n        });\n    }\n\n    function register() {\n        if (password === passwordConfirm) {\n            Firebase.auth()\n                .createUserWithEmailAndPassword(email, password)\n                .catch(error => {\n                    switch (error.code) {\n\n                        case \"auth/email-already-in-use\":\n                        case \"auth/invalid-email\":\n                            setEmailError(error.message);\n                            break;\n                        case \"auth/weak-password\":\n                            setPasswordError(error.message);\n\n                    }\n                });\n        }\n        else {\n            setPasswordError(\"Passwords Do Not Match\");\n            setPasswordConfirmError(\"Passwords Do Not Match\");\n        }\n    }\n\n    function resetPassword(e) {\n        e.preventDefault()\n        setResetPasswordEmailError(\"\")\n        if (resetPasswordEmail !== \"\") {\n            Firebase\n                .auth()\n                .sendPasswordResetEmail(resetPasswordEmail).then(function () {\n                    alert(\"Reset Password Link Sent To Email. Please Check Your Junk Folder As Well\")\n                }).catch(function (error) {\n                    setResetPasswordEmailError(error.message)\n                });\n        }\n        else {\n\n            setResetPasswordEmailError(\"Please Enter Email\")\n        }\n    }\n\n    function checkLoggedIn() {\n        if (loggedInUser.use() !== null) {\n            return <Redirect to='/admin' />;\n        }\n    }\n\n    return (\n        <React.Fragment>\n            {checkLoggedIn()}\n            <Paper className={classes.centerPaper} elevation={10}>\n\n                <form className={classes.form}>\n                    <TextField id={\"emailLogin\"} error={emailError === \"\" ? false : true} helperText={emailError} className={classes.formTextfield} label=\"Email\" variant=\"outlined\" onChange={(event) => setEmail(event.target.value)} />\n                    <TextField id={\"passwordLogin\"} error={passwordError === \"\" ? false : true} helperText={passwordError} className={classes.formTextfield} type=\"password\" label=\"Password\" variant=\"outlined\" onChange={(event) => setPassword(event.target.value)} />\n                    <Link id={\"resetPasswordHint\"} color={\"primary\"} className={classes.resetPasswordText} href=\"#\" onClick={(e) => { e.preventDefault(); setShowResetPasswordModal(true) }} >\n                        Forgotten Password\n                    </Link>\n                    <Button id={\"loginButton\"} style={{ margin: 18, width: '30ch', marginBottom: 10 }} variant=\"contained\" color=\"primary\" onClick={login}>\n                        Login\n                    </Button>\n\n                </form>\n\n                <Link id={\"registerHint\"} color={\"primary\"} className={classes.registerText} href=\"#\" onClick={(e) => { e.preventDefault(); setShowRegisterModal(true) }} >\n                    Dont Have An Account? Register\n                </Link>\n\n            </Paper>\n\n            {showRegisterModal && <Modal\n                open={true}\n                onClose={() => setShowRegisterModal(false)}\n                id={\"registerModal\"}\n            >\n                <div className={classes.modalContent}>\n\n                    <Paper className={classes.centerPaper} >\n                        <Button onClick={() => setShowRegisterModal(false)} style={{ position: \"absolute\", top: 0, right: 0, margin: 10 }}>X</Button>\n                        <form className={classes.form} style={{ marginTop: 20 }}>\n                            <TextField id={\"emailRegister\"} error={emailError === \"\" ? false : true} helperText={emailError} className={classes.formTextfield} label=\"Email\" variant=\"outlined\" onChange={(event) => setEmail(event.target.value)} />\n                            <TextField id={\"passwordRegister\"} error={passwordError === \"\" ? false : true} helperText={passwordError} className={classes.formTextfield} type=\"password\" label=\"Password\" variant=\"outlined\" onChange={(event) => setPassword(event.target.value)} />\n                            <TextField id={\"passwordRegisterConfirm\"} error={passwordConfirmError === \"\" ? false : true} helperText={passwordConfirmError} className={classes.formTextfield} type=\"password\" label=\"Confirm Password\" variant=\"outlined\" onChange={(event) => setPasswordConfirm(event.target.value)} />\n\n\n                            <Button id={\"registerButton\"} style={{ margin: 18, width: '30ch', marginBottom: 0 }} variant=\"contained\" color=\"primary\" onClick={register}>\n                                Register\n                            </Button>\n\n                        </form>\n\n                    </Paper>\n                </div>\n\n            </Modal>}\n\n            {showResetPasswordModal && <Modal\n                open={true}\n                onClose={() => setShowResetPasswordModal(false)}\n                id={\"resetPasswordModal\"}\n            >\n                <div className={classes.modalContent}>\n\n                    <Paper className={classes.centerPaper} >\n                        <Button onClick={() => setShowResetPasswordModal(false)} style={{ position: \"absolute\", top: 0, right: 0, margin: 10 }}>X</Button>\n                        <form className={classes.form} style={{ marginTop: 20 }}>\n                            <TextField id={\"emailResetPasswordTextField\"} error={resetPasswordEmailError === \"\" ? false : true} helperText={resetPasswordEmailError} className={classes.formTextfield} label=\"Email\" variant=\"outlined\" onChange={(event) => setResetPasswordEmail(event.target.value)} />\n\n                            <Button id={\"resetPasswordButton\"} style={{ margin: 18, width: '30ch', marginBottom: 0 }} variant=\"contained\" color=\"primary\" onClick={resetPassword}>\n                                Reset Password\n                            </Button>\n\n                        </form>\n\n                    </Paper>\n                </div>\n\n            </Modal>}\n        </React.Fragment>\n\n    );\n}\n\nexport default LoginPaper;","import React, { useState } from 'react';\nimport {\n    AppBar, \n    Toolbar, \n    Typography, \n    List, \n    ListItem,\n    Grid, \n    SwipeableDrawer, \n    Button,\n    useTheme,\n    useMediaQuery\n} from '@material-ui/core';\n\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport { loggedInUser, setUser } from '../../utils/userState';\n\nimport Firebase from '../../utils/firebase';\n\nimport { Redirect } from 'react-router';\n\nimport { useStyles } from '../style.js';\n\nconst NavBar = (props) => {\n\n    const theme = useTheme();\n\n    // Check if device is a mobile device\n    const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n    const classes = useStyles();\n\n    // State to track if drawer is open (responsive)\n    const [drawerOpen, setDrawerOpen] = useState(false);\n\n    const user = loggedInUser.use();\n\n    function logout() {\n        Firebase.auth().signOut();\n        setUser(null)\n    }\n\n    // Create a drawer for mobile devices\n    const createDrawer = () => {\n        return (\n            <div>\n                {/* Navbar */}\n                <AppBar>\n                    <Toolbar>\n                        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n                            <MenuIcon\n                                className={classes.sideBarIcon}\n                                onClick={() => { setDrawerOpen(true) }} />\n                            <Typography color=\"inherit\">Capus Pathfinder</Typography>\n                            <Typography color=\"inherit\"></Typography>\n                        </Grid>\n                    </Toolbar>\n                </AppBar>\n\n                {/* Sidebar for options */}\n                <SwipeableDrawer\n                    open={drawerOpen}\n                    onClose={() => { setDrawerOpen(false) }}\n                    onOpen={() => { setDrawerOpen(true) }}>\n\n                    <div\n                        tabIndex={0}\n                        role=\"button\"\n                        onClick={() => { setDrawerOpen(false) }}\n                        onKeyDown={() => { setDrawerOpen(false) }}>\n\n                        <List className={classes.list}>\n                            <ListItem key={1} id={\"createMapLink\"} button divider onClick={event =>  window.location.href='#/createmap'}>Create Map Map </ListItem>\n                            <ListItem key={2} id={\"viewMapLink\"} button divider onClick={event =>  window.location.href='#/viewmap'}>View Map </ListItem>\n                            <ListItem key={3} id={\"viewAdminLink\"} button divider onClick={event =>  window.location.href='#/admin'}>Admin </ListItem>\n                            <ListItem key={4} id={\"loginLogoutButton\"} button divider onClick={user === null ? () => {} : logout}>{user === null ? \"Login\" : \"Logout\"} </ListItem>\n                            \n                        </List>\n                    </div>\n\n                </SwipeableDrawer>\n\n            </div>\n        );\n    }\n\n    // Only create navbar for non-mobile devices\n    const destroyDrawer = () => {\n        return (\n            <AppBar>\n                <Toolbar>\n                    <Typography style={{ flexGrow: 1 }} color=\"inherit\" >Capus Pathfinder</Typography>\n                    <Button id={\"createMapLink\"} className={classes.button} color=\"inherit\" onClick={event =>  window.location.href='#/createmap'}>Create Map</Button>\n                    <Button id={\"viewMapLink\"} className={classes.button} color=\"inherit\" onClick={event =>  window.location.href='#/viewmap'}>View Map</Button>\n                    <Button id={\"viewAdminLink\"} className={classes.button} color=\"inherit\" onClick={event =>  window.location.href='#/admin'}>Admin</Button>\n                    <Button id={\"loginLogoutButton\"} className={classes.button} color=\"inherit\" onClick={user === null ? () => {} : logout}>{user === null ? \"Login\" : \"Logout\"}</Button>\n\n                </Toolbar>\n            </AppBar>\n        )\n    }\n\n    return (\n        isMobile ? createDrawer() : destroyDrawer()\n    );\n\n\n}\n\n\nexport default NavBar;","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n\n    page: {\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        background: '#e3e3e3'\n    }\n\n}))\n\nexport { useStyles }","import React from 'react';\nimport LoginPaper from '../../components/LoginPaper';\n\nimport NavBar from '../../components/NavBar';\n\nimport { loggedInUser } from '../../utils/userState';\nimport { Redirect } from 'react-router-dom';\n\nimport { useStyles } from '../style.js';\n\nconst HomePage = () => {\n\n    const classes = useStyles();\n\n    function checkLoggedIn() {\n        if (loggedInUser.use() === null) {\n            return <Redirect to='/' />;\n        }\n    }\n\n    return (\n        <div className={classes.page}>\n            {checkLoggedIn()}\n            <NavBar />\n            <LoginPaper />\n            \n        </div>\n\n    );\n}\n\nexport default HomePage;","import React, { useState } from 'react';\r\nimport {\r\n    AppBar, \r\n    Toolbar, \r\n    Typography, \r\n    List, \r\n    ListItem,\r\n    Grid, \r\n    SwipeableDrawer, \r\n    Button,\r\n    useTheme,\r\n    useMediaQuery\r\n} from '@material-ui/core';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport Firebase from '../../utils/firebase';\r\n\r\nimport { loggedInUser, setUser } from '../../utils/userState';\r\n\r\nimport { useStyles } from '../style.js';\r\n\r\nconst NavBar = (props) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    // Check if device is a mobile device\r\n    const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n    const classes = useStyles();\r\n\r\n    // State to track if drawer is open (responsive)\r\n    const [drawerOpen, setDrawerOpen] = useState(false);\r\n\r\n    function logout() {\r\n        Firebase.auth().signOut();\r\n        setUser(null)\r\n    }\r\n\r\n    // Create a drawer for mobile devices\r\n    const createDrawer = () => {\r\n        return (\r\n            <div>\r\n                {/* Navbar */}\r\n                <AppBar className={classes.createMapAppBar}>\r\n                    <Toolbar>\r\n                        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n                            <MenuIcon\r\n                                className={classes.sideBarIcon}\r\n                                onClick={() => { setDrawerOpen(true) }} />\r\n                            <Typography color=\"inherit\">Capus Pathfinder</Typography>\r\n                            <Typography color=\"inherit\"></Typography>\r\n                        </Grid>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {/* Sidebar for options */}\r\n                <SwipeableDrawer\r\n                    open={drawerOpen}\r\n                    onClose={() => { setDrawerOpen(false) }}\r\n                    onOpen={() => { setDrawerOpen(true) }}>\r\n\r\n                    <div\r\n                        tabIndex={0}\r\n                        role=\"button\"\r\n                        onClick={() => { setDrawerOpen(false) }}\r\n                        onKeyDown={() => { setDrawerOpen(false) }}>\r\n\r\n                        <List className={classes.list}>\r\n                            <ListItem id={\"previousStepLink\"} key={1} onClick={props.decrementStep} button divider> Previous Step </ListItem>\r\n                            <ListItem id={\"nextStepLink\"} key={2} onClick={props.incrementStep} button divider> Next Step </ListItem>\r\n                            <ListItem id={\"loginLogoutButton\"} key={3} button divider onClick={loggedInUser === null ? () => {} : logout}>{loggedInUser === null ? \"Login\" : \"Logout\"} </ListItem>\r\n\r\n                        </List>\r\n                    </div>\r\n                    \r\n                </SwipeableDrawer>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Only create navbar for non-mobile devices\r\n    const destroyDrawer = () => {\r\n        return (\r\n            <AppBar className={classes.createMapAppBar}>\r\n                <Toolbar>\r\n                    <Typography style={{ flexGrow: 1 }} color=\"inherit\" >Capus Pathfinder</Typography>\r\n                    <Button id={\"previousStepLink\"} onClick={props.decrementStep} className={classes.button} color=\"inherit\">Previous Step</Button>\r\n                    <Button id={\"nextStepLink\"} onClick={props.incrementStep} className={classes.button} color=\"inherit\">Next Step</Button>\r\n                    <Button id={\"loginLogoutButton\"} className={classes.button} color=\"inherit\" onClick={loggedInUser === null ? () => {} : logout}>{loggedInUser === null ? \"Login\" : \"Logout\"}</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n        )\r\n    }\r\n\r\n    return (\r\n        isMobile ? createDrawer() : destroyDrawer()\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nimport {\r\n    Drawer,\r\n    Toolbar,\r\n    List,\r\n    Divider,\r\n    ListItem,\r\n    ListItemText\r\n} from '@material-ui/core';\r\n\r\nimport { useStyles } from '../style.js';\r\n\r\nconst CreateMapSidebar = (props) => {\r\n    const classes = useStyles();\r\n\r\n    // Options for when active step is 0\r\n    function exteriorMapOptions() {\r\n        return (\r\n            <List>\r\n\r\n                <ListItem id={\"createBuilding\"} button key={\"building\"} onClick={() => { props.buttonClick(\"building\") }}>\r\n                    <ListItemText primary={\"Building\"} />\r\n                </ListItem>\r\n                <ListItem id={\"createPath\"} button key={\"path\"} onClick={() => { props.buttonClick(\"path\") }}>\r\n                    <ListItemText primary={\"Path\"} />\r\n                </ListItem>\r\n\r\n            </List>\r\n        );\r\n    }\r\n\r\n    // Options for when active step is 1\r\n    function internalMapOptions() {\r\n        var disabled = props.buildingBeingViewed === null;\r\n        return (\r\n            <List>\r\n                <ListItem id={\"createEntrance\"} disabled={disabled} button key={\"entrance\"} onClick={() => { props.buttonClick(\"entrance\") }}>\r\n                    <ListItemText primary={\"Entrance\"} />\r\n                </ListItem>\r\n                <ListItem id={\"createRoom\"} disabled={disabled} button key={\"room\"} onClick={() => { props.buttonClick(\"room\") }}>\r\n                    <ListItemText primary={\"Room\"} />\r\n                </ListItem>\r\n                <ListItem id={\"createStaircase\"} disabled={disabled} button key={\"stairs\"} onClick={() => { props.buttonClick(\"stairs\") }}>\r\n                    <ListItemText primary={\"Staircase\"} />\r\n                </ListItem>\r\n                <ListItem id={\"createLift\"} disabled={disabled} button key={\"lift\"} onClick={() => { props.buttonClick(\"lifts\") }}>\r\n                    <ListItemText primary={\"Lift\"} />\r\n                </ListItem>\r\n                <ListItem id={\"createPath\"} disabled={disabled} button key={\"path\"} onClick={() => { props.buttonClick(\"path\") }}>\r\n                    <ListItemText primary={\"Path\"} />\r\n                </ListItem>\r\n\r\n            </List>\r\n        );\r\n    }\r\n\r\n    return (\r\n\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n            anchor=\"left\"\r\n        >\r\n            <Toolbar />\r\n            <div className={classes.drawerContainer}>\r\n                {props.activeStep === 0 ? exteriorMapOptions() : internalMapOptions() }\r\n                <Divider />\r\n            </div>\r\n        </Drawer>\r\n\r\n    );\r\n}\r\n\r\nexport default CreateMapSidebar;","import React, { useState } from 'react';\r\n\r\nimport {\r\n    TextField,\r\n    Grid,\r\n    Drawer,\r\n    Toolbar,\r\n    List,\r\n    Divider,\r\n    ListItem,\r\n    ListItemText,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    Input,\r\n    MenuItem,\r\n    Chip,\r\n    Button,\r\n    Paper,\r\n    Tab,\r\n    Tabs\r\n} from '@material-ui/core';\r\n\r\nimport {\r\n    ToggleButton,\r\n    ToggleButtonGroup\r\n} from '@material-ui/lab';\r\n\r\nimport {\r\n    FormatAlignLeft,\r\n    FormatAlignCenter,\r\n    FormatAlignRight\r\n} from '@material-ui/icons';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from 'react-swipeable-views';\r\n\r\nimport { useStyles } from '../style.js';\r\n\r\nconst CreateMapObjectPropertiesSidebar = (props) => {\r\n    const classes = useStyles();\r\n    const [tabValue, setTabValue] = useState(0);\r\n    const [accessibleLiftstairsValues, setAccessibleLiftstairsValues] = useState([]);\r\n    const [shapeIndex, setShapeIndex] = useState(\"\");\r\n\r\n    // Determine class name of the list based on active step\r\n    let listClassName = props.activeStep === 0 ? classes.drawerContainer + \" \" + classes.propertiesForm : classes.drawerContainer;\r\n\r\n    // If properties of a shape are provided, have the fields enabled\r\n    let fieldsDisabled = props.properties ? false : true;\r\n\r\n    // Determine class name of properties tab\r\n    let propertiesClassName = props.properties ? \"\" : classes.propertiesFormDisabled;\r\n\r\n    // If properties of a shape are provided and the shape index is \r\n    // not equal to the shape index already stored, set shape index\r\n    if (props.properties && shapeIndex !== props.properties.index) {\r\n\r\n        // Set the shape index\r\n        setShapeIndex(props.properties.index);\r\n\r\n        // If the properties are for a lift or straicase, add the floors to a list,\r\n        // for the floor selection\r\n        if (props.properties.name === \"lifts\" || props.properties.name === \"stairs\") {\r\n            var accessible = [];\r\n            for (var i = 0; i < props.properties.floors.length; i++) {\r\n                if (props.properties.floors[i]) {\r\n                    accessible.push(\"Floor \" + i);\r\n                }\r\n            }\r\n            // Set the array of floors\r\n            setAccessibleLiftstairsValues([...accessible]);\r\n        }\r\n    }\r\n\r\n    // Set tab value when a tab is clicked\r\n    const handleTabChange = (event, newValue) => {\r\n        setTabValue(newValue);\r\n    };\r\n\r\n    // Set tab value when slided with mouse\r\n    const handleTabChangeIndex = (index) => {\r\n        setTabValue(index);\r\n    };\r\n\r\n\r\n    // Update the property when a field value is changed\r\n    function fieldEdit(e, propertyName) {\r\n        props.updateProperty(propertyName, e.target.value);\r\n    }\r\n\r\n    // Handle a floor being selected from the menu\r\n    function handleFloorSelect(e) {\r\n        // Update the values of the floor selection field\r\n        setAccessibleLiftstairsValues(e.target.value);\r\n        var indexes = [];\r\n        for (var i = 0; i < e.target.value.length; i++) {\r\n            indexes.push(parseInt(e.target.value[i].split(\" \")[1]));\r\n        }\r\n\r\n        // Update the accessibility of lift/staircase\r\n        props.updateLiftStaircaseAccessibility(props.properties.name, indexes, props.properties.index);\r\n\r\n    }\r\n\r\n    // Properties tab\r\n    function properties() {\r\n        return (\r\n\r\n            <div className={classes.drawerContainer + \" \" + classes.propertiesForm}>\r\n                <List className={propertiesClassName}>\r\n\r\n                    {props.activeStep === 0 &&\r\n                        <Button onClick={props.deleteSelected} style={{ backgroundColor: \"red\", marginTop: 20, marginBottom: 20, marginLeft: 20, marginRight: 20, width: \"85%\" }} variant=\"contained\" >\r\n                            Delete\r\n                        </Button>\r\n                    }\r\n\r\n                    {/* If properties of a shape are for a lift or staircase show the floor selection field */}\r\n                    {props.properties && (props.properties.name === \"lifts\" || props.properties.name === \"stairs\") &&\r\n                        <ListItem>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel>Chip</InputLabel>\r\n                                <Select\r\n                                    multiple\r\n                                    value={accessibleLiftstairsValues}\r\n                                    onChange={handleFloorSelect}\r\n                                    input={<Input id=\"select-multiple-chip\" />}\r\n                                    renderValue={(accessibleLiftstairsValues) => (\r\n                                        <div className={classes.chips}>\r\n                                            {accessibleLiftstairsValues.map((value) => (\r\n                                                <Chip key={value} label={value} className={classes.chip} />\r\n                                            ))}\r\n                                        </div>\r\n                                    )}\r\n                                // MenuProps={MenuProps}\r\n                                >\r\n                                    {props.properties.floors.map((floor, key) => (\r\n                                        <MenuItem key={key} value={\"Floor \" + key} name={key}>\r\n                                            {\"Floor \" + key}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </ListItem>\r\n                    }\r\n                    <ListItem>\r\n\r\n                        <Grid\r\n                            container\r\n                            alignItems=\"center\"\r\n                            justify=\"center\"\r\n                        >\r\n\r\n                            <Grid item>\r\n                                {/* X position text field */}\r\n                                <TextField\r\n                                    className={classes.textField + ' ' + classes.positionTextField}\r\n                                    disabled\r\n                                    variant=\"outlined\"\r\n                                    label=\"X\"\r\n                                    value={props.properties ? props.properties.x : \"\"}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                {/* Y position text field */}\r\n                                <TextField\r\n                                    className={classes.textField + ' ' + classes.positionTextField}\r\n                                    disabled\r\n                                    variant=\"outlined\"\r\n                                    label=\"Y\"\r\n                                    value={props.properties ? props.properties.y : \"\"}\r\n                                />\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                    </ListItem>\r\n\r\n\r\n                    <ListItem>\r\n                        {/* Rotation text field */}\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            disabled\r\n                            variant=\"outlined\"\r\n                            label=\"Rotation\"\r\n                            value={props.properties ? props.properties.rotation : \"\"}\r\n                        />\r\n\r\n                    </ListItem>\r\n\r\n                    <Divider />\r\n\r\n                    <ListItem>\r\n                        {/* Label of shape text field */}\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            disabled={fieldsDisabled}\r\n                            variant=\"outlined\"\r\n                            label=\"Label\"\r\n                            onChange={(e) => fieldEdit(e, \"label\")}\r\n                            value={props.properties ? props.properties.label : \"\"}\r\n                        />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                        {/* Font size of label text field */}\r\n                        <TextField\r\n                            label=\"Font Size\"\r\n                            disabled={fieldsDisabled}\r\n                            className={classes.textField}\r\n                            type=\"number\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            inputProps={{\r\n                                min: 1,\r\n\r\n                            }}\r\n                            variant=\"outlined\"\r\n                            onChange={(e) => fieldEdit(e, \"fontSize\")}\r\n                            value={props.properties ? props.properties.fontSize : \"\"}\r\n                        />\r\n                    </ListItem>\r\n\r\n                    <ListItem>\r\n                        {/* Text allignment buttons */}\r\n                        <ToggleButtonGroup value={props.properties ? props.properties.textAlign : \"\"} exclusive className={classes.textField} aria-label=\"outlined primary button group\">\r\n                            <ToggleButton value=\"left\" onClick={() => props.updateProperty(\"textAlign\", \"left\")}><FormatAlignLeft /></ToggleButton>\r\n                            <ToggleButton value=\"center\" onClick={() => props.updateProperty(\"textAlign\", \"center\")}><FormatAlignCenter /></ToggleButton>\r\n                            <ToggleButton value=\"right\" onClick={() => props.updateProperty(\"textAlign\", \"right\")}><FormatAlignRight /></ToggleButton>\r\n                        </ToggleButtonGroup>\r\n                    </ListItem>\r\n\r\n                    <Divider />\r\n                    <ListItem>\r\n                        {/* Category selection of shape */}\r\n                        <FormControl variant=\"outlined\" className={classes.textField}>\r\n                            <InputLabel htmlFor=\"outlined-age-native-simple\">Category</InputLabel>\r\n                            <Select\r\n                                disabled={fieldsDisabled}\r\n                                native\r\n                                value={props.properties ? props.properties.category : \"\"}\r\n                                onChange={(e) => fieldEdit(e, \"category\")}\r\n                                label=\"Category\"\r\n                                inputProps={{\r\n                                    name: 'Category',\r\n                                }}\r\n                            >\r\n                                <option aria-label=\"None\" value=\"\" />\r\n                                {props.categories.map((category, key) => {\r\n                                    return (\r\n                                        <option key={key} value={key}>{category[\"categoryName\"]}</option>\r\n                                    )\r\n                                })}\r\n                            </Select>\r\n                        </FormControl>\r\n                        {/* Button to edit categories */}\r\n                        <span><Button onClick={props.showCategoryModal} variant=\"contained\"><EditIcon /></Button></span>\r\n\r\n                    </ListItem>\r\n\r\n                </List>\r\n\r\n                {/* If fields are diabled display message */}\r\n                {fieldsDisabled ? <h2 className={classes.propertiesFormDisabledText}>Select Shape to View Properties</h2> : \"\"}\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Floors tab\r\n    function floors() {\r\n\r\n        // If building being viewed property is provided create and display list as buttons\r\n        if (props.buildingBeingViewed) {\r\n            return (\r\n                <div className={listClassName}>\r\n                    <h1 style={{ textAlign: \"center\" }}>Select Floor From Below</h1>\r\n                    <List>\r\n                        {props.buildingBeingViewed.internal.map((floor, key) => {\r\n\r\n                            return (\r\n                                <ListItem button key={\"floor\" + key} onClick={() => { props.setFloorBeingViewed(key) }}>\r\n                                    <ListItemText primary={\"Floor \" + key} />\r\n                                </ListItem>\r\n                            )\r\n                        })}\r\n\r\n                        <ListItem button key={\"addFloor\"} onClick={props.addFloor}>\r\n                            <ListItemText primary={\"Add Floor\"} />\r\n                        </ListItem>\r\n                    </List>\r\n                </div >\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    // Buildings tab\r\n    function buildings() {\r\n        // Create and display list of buildings' name\r\n        return (\r\n            <div className={listClassName}>\r\n                <h1 style={{ textAlign: \"center\" }}>Select Building From Below</h1>\r\n                <List>\r\n                    {props.savedShapes.map((shape, key) => {\r\n                        if (shape.name != \"path\") {\r\n                            return (\r\n                                <ListItem selected={false} button key={shape.label} onClick={() => { props.setBuildingBeingViewed(key) }}>\r\n                                    <ListItemText primary={shape.label} />\r\n                                </ListItem>\r\n                            )\r\n                        }\r\n\r\n                    })}\r\n\r\n                </List>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n    // Tab panel\r\n    function TabPanel(props) {\r\n        const { children, value, index, ...other } = props;\r\n\r\n        return (\r\n            <div\r\n                role=\"tabpanel\"\r\n                hidden={value !== index}\r\n                id={`simple-tabpanel-${index}`}\r\n                aria-labelledby={`simple-tab-${index}`}\r\n                {...other}\r\n            >\r\n                {value === index && (\r\n                    <div>\r\n\r\n                        {children}\r\n\r\n                    </div>\r\n\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Prop types of tab panel component \r\n    TabPanel.propTypes = {\r\n        children: PropTypes.node,\r\n        index: PropTypes.any.isRequired,\r\n        value: PropTypes.any.isRequired,\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n            anchor=\"right\"\r\n        >\r\n            <Toolbar />\r\n\r\n            <Paper className={classes.paperTabs}>\r\n                {/* Tab buttons */}\r\n                <Tabs\r\n                    value={tabValue}\r\n                    onChange={handleTabChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"primary\"\r\n                    variant=\"scrollable\"\r\n                    scrollButtons=\"on\"\r\n                >\r\n                    <Tab classes={{ root: classes.tab }} label=\"Properties\" />\r\n                    <Tab classes={{ root: classes.tab }} disabled={props.activeStep === 0} label=\"Buildings\" />\r\n                    <Tab classes={{ root: classes.tab }} disabled={props.activeStep === 0} label=\"Floors\" />\r\n                </Tabs>\r\n\r\n                {/* Tab panel content */}\r\n                <SwipeableViews\r\n                    axis={'x-reverse'}\r\n                    index={tabValue}\r\n                    onChangeIndex={handleTabChangeIndex}\r\n                >\r\n                    <TabPanel value={tabValue} index={0} >\r\n                        {properties()}\r\n                    </TabPanel>\r\n                    <TabPanel value={tabValue} index={1} >\r\n                        {buildings()}\r\n                    </TabPanel>\r\n                    <TabPanel value={tabValue} index={2} >\r\n                        {floors()}\r\n                    </TabPanel>\r\n                </SwipeableViews>\r\n            </Paper>\r\n\r\n        </Drawer >\r\n\r\n    );\r\n}\r\n\r\nexport default CreateMapObjectPropertiesSidebar;","import React, { useRef, useEffect } from 'react';\nimport { \n    Rect, \n    Group, \n    Text, \n    Transformer\n} from 'react-konva';\n\nconst EditShape = (props) => {\n\n    // References \n    const transformRef = useRef();\n    const groupRef = useRef();\n    const shapeRef = useRef();\n    const textRef = useRef();\n\n    // Attach transformer to selected shape\n    useEffect(() => {\n        if (props.shapeProps.selected) {\n            transformRef.current.nodes([groupRef.current]);\n            transformRef.current.getLayer().batchDraw();\n\n        }\n    }, [props.shapeProps.selected])\n    \n    return (\n\n        <React.Fragment>\n        \n            <Group\n                ref={groupRef}\n                shapePoints={props.shapeProps.points}\n                // key={props.index}\n                // index={props.index}\n                draggable\n                onDragStart={(e) => props.dragStart(e, props.index)}\n                onDragMove={(e) => props.dragMove(e, props.index)}\n                onDragEnd={(e) => props.dragEnd(e, props.index)}\n                onClick={() => props.onSelect(props.index)}\n                onTap={() => props.onSelect(props.index)}\n                rotation={parseInt(props.shapeProps.rotation)}\n                x={props.shapeProps.x}\n                y={props.shapeProps.y}\n                // offsetX={props.shapeProps.width / 2}\n                // offsetY={props.shapeProps.height / 2}\n                width={props.shapeProps.width}\n                height={props.shapeProps.height}\n                name={props.shapeProps.name}\n                zIndex={props.shapeProps.name === \"building\" ? 1000 : -1}\n\n                // On completion of transformation\n                onTransformEnd={(e) => {\n\n                    // Get scaled values for X and Y axis for selected shape\n                    var node = groupRef.current;\n                    const scaleX = node.scaleX();\n                    const scaleY = node.scaleY();\n\n                    // Reset scale of selected shape\n                    node.scaleX(1);\n                    node.scaleY(1);\n\n                    // Get new width and height for selected shape\n                    var shape = shapeRef.current;\n                    const width = shape.width();\n                    const height = shape.height();\n\n                    // Reset text scale to prevent font size changing\n                    var text = textRef.current;\n                    const absScale = text.getAbsoluteScale();\n                    text.scaleX(text.scaleX() / absScale.x);\n                    text.scaleY(text.scaleY() / absScale.y);\n\n                    // Update properties of shape\n                    props.updatePropertiesOfShape(\"x\", node.x());\n                    props.updatePropertiesOfShape(\"y\", node.y());\n                    props.updatePropertiesOfShape(\"width\", width * scaleX);\n                    props.updatePropertiesOfShape(\"height\", height * scaleY);\n                    props.updatePropertiesOfShape(\"rotation\", Math.floor(node.rotation()));\n                    \n                    // Update points of shape\n                    props.updatePoints();\n\n                    // props.dragEnd(e, props.index);\n\n                }}\n            >\n\n                {/* Rectangle to represent building */}\n                <Rect\n                    ref={shapeRef}\n                    fill={props.shapeColour}\n                    width={props.shapeProps.width}\n                    height={props.shapeProps.height}\n\n                />\n\n                {/* Text component for label */}\n                <Text\n                    ref={textRef}\n                    text={props.shapeProps.label}\n                    width={props.shapeProps.width}\n                    height={props.shapeProps.height}\n                    fontSize={parseInt(props.shapeProps.fontSize)}\n                    fontFamily='Calibri'\n                    fill={props.fontColour}\n                    verticalAlign=\"middle\"\n                    align={props.shapeProps.textAlign}\n                />\n\n            </Group>\n\n            {/* Display transformer is shape is selected */}\n            {props.shapeProps.selected && (\n                <Transformer\n                    width={200}\n                    ref={transformRef}\n                    boundBoxFunc={(oldBox, newBox) => {\n                        \n                        // Limit transformation to prevent it getting too small\n                        if (newBox.width < 10 || newBox.height < 10) {\n                            return oldBox;\n                        }\n\n                        return newBox;\n\n                    }}\n                />\n            )}\n        </React.Fragment>\n    )\n\n}\n\nexport default EditShape;","import React, { useState } from 'react';\r\nimport { Stage, Layer, Line, Rect } from 'react-konva';\r\n\r\nimport EditShape from '../EditShape';\r\n\r\nimport { useStyles } from '../style.js';\r\n\r\nconst CreateMapCanvas = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [stageScale, setStageScale] = useState(1);\r\n    const [stageX, setStageX] = useState(0);\r\n    const [stageY, setStageY] = useState(0);\r\n\r\n    let points = [];\r\n\r\n    function handleWheel(e) {\r\n        e.evt.preventDefault();\r\n\r\n        // Initial scale of stage\r\n        const scaleBy = 1.01;\r\n\r\n        // Stage in current form\r\n        const stage = e.target.getStage();\r\n\r\n        // Previous Scale\r\n        const oldScale = stage.scaleX();\r\n\r\n        // Find where mouse is pointing\r\n        const mousePointTo = {\r\n            x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\r\n            y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale\r\n        };\r\n\r\n        // Calculate and set new scale of stage\r\n        const newScale = e.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n        stage.scale({ x: newScale, y: newScale });\r\n\r\n        // Set properties with calculated values\r\n        setStageScale(newScale)\r\n        setStageX(-(mousePointTo.x - stage.getPointerPosition().x / newScale) * newScale);\r\n        setStageY(-(mousePointTo.y - stage.getPointerPosition().y / newScale) * newScale);\r\n\r\n    };\r\n\r\n    // Display building shapes (with paths) for when active step is 1\r\n    function displayBuildings() {\r\n        return (\r\n\r\n            // Map shapes from props and display\r\n            props.shapes.map((shape, key) => {\r\n\r\n                return (\r\n\r\n                    <EditShape\r\n                        key={key}\r\n                        index={key}\r\n                        shapeProps={shape}\r\n                        dragStart={props.dragStart}\r\n                        dragMove={props.dragMove}\r\n                        dragEnd={props.dragEnd}\r\n                        onSelect={props.onSelect}\r\n                        updatePropertiesOfShape={props.updateProperty}\r\n                        shapeColour={props.categories[shape.category].mainColour}\r\n                        fontColour={props.categories[shape.category].fontColour}\r\n                        // updatePoints={() => props.updatePoints(key)}\r\n                        updatePoints={props.updatePoints}\r\n                    />\r\n\r\n                )\r\n            })\r\n        );\r\n    }\r\n\r\n    // Display internal structure of selected building, when active step is 1\r\n    function displayInternalStructure() {\r\n\r\n        // If a building has been selected\r\n        if (props.buildingBeingViewed) {\r\n\r\n            points = [\r\n                props.buildingBeingViewed.x, props.buildingBeingViewed.y,\r\n                props.buildingBeingViewed.x + props.buildingBeingViewed.width, props.buildingBeingViewed.y,\r\n                props.buildingBeingViewed.x + props.buildingBeingViewed.width, props.buildingBeingViewed.y + props.buildingBeingViewed.height,\r\n                props.buildingBeingViewed.x, props.buildingBeingViewed.y + props.buildingBeingViewed.height\r\n            ];\r\n\r\n            return (\r\n                <React.Fragment>\r\n\r\n                    <Rect\r\n\r\n                        x={props.buildingBeingViewed.x}\r\n                        y={props.buildingBeingViewed.y}\r\n                        width={props.buildingBeingViewed.width}\r\n                        height={props.buildingBeingViewed.height}\r\n                        fill={props.categories[props.buildingBeingViewed.category][\"mainColour\"]}\r\n                        closed={true}\r\n                        rotation={0}\r\n\r\n                    />\r\n\r\n                    {/* {props.buildingBeingViewed.internal[props.floorBeingViewed].map((shape, key) => {\r\n\r\n                        if (shape !== null && shape.length > 0) {\r\n\r\n\r\n                            return (\r\n                                <React.Fragment>\r\n\r\n                                    <Shape\r\n                                        key={key}\r\n                                        index={key}\r\n                                        shapeProps={shape}\r\n                                        dragStart={props.dragStart}\r\n                                        dragMove={props.dragMove}\r\n                                        dragEnd={props.dragEnd}\r\n                                        onSelect={props.onSelect}\r\n                                        updatePropertiesOfShape={props.updateProperty}\r\n                                        shapeColour={props.categories[shape.category].mainColour}\r\n                                        fontColour={props.categories[shape.category].fontColour}\r\n                                        // updatePoints={() => props.updatePoints(key)}\r\n                                        updatePoints={props.updatePoints}\r\n                                    />\r\n                                </React.Fragment>\r\n\r\n                            )\r\n\r\n\r\n                        }\r\n                        else {\r\n\r\n                        }\r\n\r\n                    })} */}\r\n\r\n                    {/* Map all shapes from given props and display */}\r\n                    {props.shapes.map((shape, key) => {\r\n\r\n                        // If shape is not null\r\n                        if (shape !== null) {\r\n\r\n                            // If the shape represents a lift or staircase \r\n                            if (shape.name === \"lifts\" || shape.name === \"stairs\") {\r\n\r\n                                // If it is accessible by the floor being viewed, display it\r\n                                if (shape.floors[props.floorBeingViewed]) {\r\n                                    return (\r\n\r\n                                        <EditShape\r\n                                            key={key}\r\n                                            index={key}\r\n                                            shapeProps={shape}\r\n                                            dragStart={props.dragStart}\r\n                                            dragMove={props.dragMove}\r\n                                            dragEnd={props.dragEnd}\r\n                                            onSelect={props.onSelect}\r\n                                            updatePropertiesOfShape={props.updateProperty}\r\n                                            shapeColour={props.categories[shape.category].mainColour}\r\n                                            fontColour={props.categories[shape.category].fontColour}\r\n                                            // updatePoints={() => props.updatePoints(key)}\r\n                                            updatePoints={props.updatePoints}\r\n                                        />\r\n\r\n                                    )\r\n                                }\r\n                            }\r\n                            // If shape is not a lift or staircase, display it\r\n                            else {\r\n                                return (\r\n\r\n\r\n                                    <EditShape\r\n                                        key={key}\r\n                                        index={key}\r\n                                        shapeProps={shape}\r\n                                        dragStart={props.dragStart}\r\n                                        dragMove={props.dragMove}\r\n                                        dragEnd={props.dragEnd}\r\n                                        onSelect={props.onSelect}\r\n                                        updatePropertiesOfShape={props.updateProperty}\r\n                                        shapeColour={props.categories[shape.category].mainColour}\r\n                                        fontColour={props.categories[shape.category].fontColour}\r\n                                        // updatePoints={() => props.updatePoints(key)}\r\n                                        updatePoints={props.updatePoints}\r\n                                    />\r\n\r\n\r\n                                )\r\n                            }\r\n                        }\r\n\r\n                    })}\r\n                </React.Fragment>\r\n\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Stage\r\n            className={classes.canvas}\r\n            width={document.documentElement.clientWidth}\r\n            height={document.documentElement.clientHeight}\r\n            draggable\r\n            ref={props.stageRef}\r\n            onMouseDown={(e) => props.checkDeselect(e)}\r\n            onTouchStart={(e) => props.checkDeselect(e)}\r\n            onWheel={handleWheel}\r\n            scaleX={stageScale}\r\n            scaleY={stageScale}\r\n            x={stageX}\r\n            y={stageY}\r\n\r\n        >\r\n            <Layer\r\n                ref={props.layerRef}\r\n            >\r\n\r\n                {/* Display shapes based on what the current active step is */}\r\n                {props.activeStep === 0 ? displayBuildings() : displayInternalStructure()}\r\n\r\n                {/* Map snap guidelines properties to shapes to display them */}\r\n                {props.guides.map((guide, key) => {\r\n                    if (guide['orientation'] === 'V') {\r\n                        return (\r\n                            <Line\r\n                                key={key}\r\n                                x={guide['lineGuide']}\r\n                                y={0}\r\n                                points={[0, -6000, 0, 6000]}\r\n                                stroke={'#0000FF'}\r\n                                strokeWidth={1}\r\n                                name={'guide-line'}\r\n                                dash={[4, 6]}\r\n                            />\r\n                        );\r\n                    }\r\n                    else if (guide['orientation'] === 'H') {\r\n                        return (\r\n                            <Line\r\n                                key={key}\r\n                                x={0}\r\n                                y={guide['lineGuide']}\r\n                                points={[-6000, 0, 6000, 0]}\r\n                                stroke={'#0000FF'}\r\n                                strokeWidth={1}\r\n                                name={'guide-line'}\r\n                                dash={[4, 6]}\r\n                            />\r\n                        );\r\n                    }\r\n                })}\r\n\r\n            </Layer>\r\n        </Stage>\r\n    );\r\n}\r\n\r\nexport default CreateMapCanvas;","import React from 'react';\r\n\r\nimport { \r\n    makeStyles,\r\n    withStyles, \r\n    Stepper, \r\n    Step, \r\n    StepLabel, \r\n    StepConnector \r\n} from '@material-ui/core/';\r\n\r\nimport Check from '@material-ui/icons/Check';\r\n\r\nimport clsx from 'clsx';\r\n\r\nconst QontoConnector = withStyles({\r\n    alternativeLabel: {\r\n        top: 10,\r\n        left: 'calc(-50% + 16px)',\r\n        right: 'calc(50% + 16px)',\r\n    },\r\n    active: {\r\n        '& $line': {\r\n            borderColor: '#3f51b5',\r\n        },\r\n    },\r\n    completed: {\r\n        '& $line': {\r\n            borderColor: '#3f51b5',\r\n        },\r\n    },\r\n    line: {\r\n        borderColor: '#eaeaf0',\r\n        borderTopWidth: 3,\r\n        borderRadius: 1,\r\n    },\r\n})(StepConnector);\r\n\r\nconst useQontoStepIconStyles = makeStyles({\r\n    root: {\r\n        color: '#eaeaf0',\r\n        display: 'flex',\r\n        height: 22,\r\n        alignItems: 'center',\r\n    },\r\n    active: {\r\n        color: '#3f51b5',\r\n    },\r\n    circle: {\r\n        width: 8,\r\n        height: 8,\r\n        borderRadius: '50%',\r\n        backgroundColor: 'currentColor',\r\n    },\r\n    completed: {\r\n        color: '#3f51b5',\r\n        zIndex: 1,\r\n\r\n    },\r\n});\r\n\r\nfunction QontoStepIcon(props) {\r\n    const classes = useQontoStepIconStyles();\r\n    const { active, completed } = props;\r\n\r\n    return (\r\n        <div\r\n            className={clsx(classes.root, {\r\n                [classes.active]: active,\r\n            })}\r\n        >\r\n            {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst CreateMapProgressTracker = (props) => {\r\n    const steps = ['Create Campus Map', 'Create For Each Building', 'Final Steps'];\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Stepper alternativeLabel activeStep={props.activeStep} connector={<QontoConnector />}>\r\n                {steps.map((label) => (\r\n                    <Step key={label}>\r\n                        <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>\r\n                    </Step>\r\n                ))}\r\n            </Stepper>\r\n        </React.Fragment>\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default CreateMapProgressTracker;\r\n","import React, { useState } from 'react'\nimport reactCSS from 'reactcss'\nimport { SketchPicker } from 'react-color'\n\nconst ColourPicker = (props) => {\n    const [displayColourPicker, setDisplayColourPicker] = useState(false);\n    const [colour, setColour] = useState(props.colour);\n\n    console.log(props.colour);\n\n    function handleClick() {\n        setDisplayColourPicker(!displayColourPicker);\n    }\n\n    function handleClose() {\n        setDisplayColourPicker(false);\n    }\n\n    function handleChange(colour) {\n        setColour(colour.hex);\n        props.handleColourChange(colour.hex);\n    }\n    \n    const styles = reactCSS({\n        'default': {\n            colour: {\n                width: '36px',\n                height: '14px',\n                borderRadius: '2px',\n                background: colour ,\n            },\n            swatch: {\n                padding: '5px',\n                background: '#fff',\n                borderRadius: '1px',\n                boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n                display: 'inline-block',\n                cursor: 'pointer',\n            },\n            popover: {\n                position: 'absolute',\n                zIndex: '2',\n            },\n            cover: {\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                bottom: '0px',\n                left: '0px',\n            },\n        },\n    });\n\n    return (\n        <div>\n            <div style={styles.swatch} onClick={handleClick}>\n                <div style={styles.colour} />\n            </div>\n            { displayColourPicker ? <div style={styles.popover}>\n                <div style={styles.cover} onClick={handleClose} />\n                {console.log(colour)}\n                <SketchPicker color={colour} onChange={handleChange} />\n            </div> : null}\n\n        </div>\n    )\n\n}\n\nexport default ColourPicker;","function getObjectSnappingEdges(node) {\n    var box = node.getClientRect();\n    var absolutePosition = node.absolutePosition();\n\n    return {\n        vertical: [\n            {\n                guide: Math.round(box.x),\n                offset: Math.round(absolutePosition.x - box.x),\n                snap: 'start',\n            },\n            {\n                guide: Math.round(box.x + box.width / 2),\n                offset: Math.round(absolutePosition.x - box.x - box.width / 2),\n                snap: 'center',\n            },\n            {\n                guide: Math.round(box.x + box.width),\n                offset: Math.round(absolutePosition.x - box.x - box.width),\n                snap: 'end',\n            }\n        ],\n        horizontal: [\n            {\n                guide: Math.round(box.y),\n                offset: Math.round(absolutePosition.y - box.y),\n                snap: 'start',\n            },\n            {\n                guide: Math.round(box.y + box.height / 2),\n                offset: Math.round(absolutePosition.y - box.y - box.height / 2),\n                snap: 'center',\n            },\n            {\n                guide: Math.round(box.y + box.height),\n                offset: Math.round(absolutePosition.y - box.y - box.height),\n                snap: 'end',\n            },\n        ],\n    };\n}\n\nfunction getLineGuideStops(skipShape, shapes, stageRef) {\n    var vertical = [0, stageRef.current.width() / 2, stageRef.current.width()];\n    var horizontal = [0, stageRef.current.height() / 2, stageRef.current.height()];\n\n    shapes.forEach(shape => {\n        if (shape === skipShape) {\n            return;\n        }\n\n        var box = shape.getClientRect();\n\n        vertical.push([box.x, box.x + box.width, box.x + box.width / 2]);\n        horizontal.push([box.y, box.y + box.height, box.y + box.height / 2]);\n\n    });\n\n    return {\n        vertical: vertical.flat(),\n        horizontal: horizontal.flat()\n\n    };\n}\n\nexport function getGuides(shape, allShapes, stageRef) {\n\n    var lineGuideStops = getLineGuideStops(shape, allShapes, stageRef);\n\n    var itemBounds = getObjectSnappingEdges(shape);\n\n    var resultV = [];\n    var resultH = [];\n\n    var GUIDELINEOFFSET = 5;\n\n    lineGuideStops.vertical.forEach((lineGuide) => {\n        itemBounds.vertical.forEach((itemBound) => {\n            var diff = Math.abs(lineGuide - itemBound.guide);\n\n            if (diff < GUIDELINEOFFSET) {\n                resultV.push({\n                    lineGuide: lineGuide,\n                    diff: diff,\n                    snap: itemBound.snap,\n                    offset: itemBound.offset,\n                });\n            }\n        })\n    });\n\n    lineGuideStops.horizontal.forEach((lineGuide) => {\n        itemBounds.horizontal.forEach((itemBound) => {\n            var diff = Math.abs(lineGuide - itemBound.guide);\n            if (diff < GUIDELINEOFFSET) {\n                resultH.push({\n                    lineGuide: lineGuide,\n                    diff: diff,\n                    snap: itemBound.snap,\n                    offset: itemBound.offset,\n                });\n            }\n        })\n    });\n\n    var guides = [];\n\n    var minV = resultV.sort((a, b) => a.diff - b.diff)[0];\n    var minH = resultH.sort((a, b) => a.diff - b.diff)[0];\n\n    if (minV) {\n        guides.push({\n            lineGuide: minV.lineGuide,\n            offset: minV.offset,\n            orientation: 'V',\n            snap: minV.snap,\n        })\n    }\n    if (minH) {\n        guides.push({\n            lineGuide: minH.lineGuide,\n            offset: minH.offset,\n            orientation: 'H',\n            snap: minH.snap,\n        });\n    }\n    return guides;\n}","export var categories = [\n    {\n        categoryName: \"Building\",\n        mainColour: \"#ff0000\",\n        fontColour: \"#ffffff\"\n    },\n    {\n        categoryName: \"Path\",\n        mainColour: \"#5c5953\",\n        fontColour: \"#ffffff\"\n    }\n];","export function isColliding(shape1, shape2) {\r\n\r\n    // Points of both shapes\r\n    var shape1Points = shape1.points;\r\n    var shape2Points = shape2.points;\r\n\r\n    // var shape1Points = shape1;\r\n    // var shape2Points = shape2;\r\n\r\n    // Generate edges using points\r\n    var shape1Edges = generateEdges(shape1Points);\r\n    var shape2Edges = generateEdges(shape2Points);\r\n\r\n    var perpendicularLine = [];\r\n    var perpendicularStack = [];\r\n    var dot = 0;\r\n    var aMin = 0;\r\n    var aMax = 0;\r\n    var bMin = 0;\r\n    var bMax = 0;\r\n\r\n    // Find perpendicular lines of edges for shape 1\r\n    for (var i = 0; i < shape1Edges.length; i += 2) {\r\n        perpendicularLine = [-shape1Edges[i + 1], shape1Edges[i]];\r\n        perpendicularStack.push(-shape1Edges[i + 1]);\r\n        perpendicularStack.push(shape1Edges[i]);\r\n    }\r\n\r\n    // Find perpendicular lines of edges for shape 2\r\n    for (var i = 0; i < shape2Edges.length; i += 2) {\r\n        perpendicularLine = [-shape2Edges[i + 1], shape2Edges[i]];\r\n        perpendicularStack.push(-shape2Edges[i + 1]);\r\n        perpendicularStack.push(shape2Edges[i]);\r\n    }\r\n\r\n    // For each line in the perpendicular stack\r\n    for (var i = 0; i < perpendicularStack.length; i += 2) {\r\n        aMin = null;\r\n        aMax = null;\r\n        bMin = null;\r\n        bMax = null;\r\n\r\n        // Generate dot product of each of the points for shape 1\r\n        // and the perpendicular line\r\n        for (var j = 0; j < shape1Points.length; j += 2) {\r\n            dot = shape1Points[j] * perpendicularStack[i] + shape1Points[j + 1] * perpendicularStack[i + 1];\r\n\r\n            if(aMax === null || dot > aMax){\r\n                aMax = dot;\r\n            }\r\n\r\n            if(aMin === null || dot < aMin){\r\n                aMin = dot;\r\n            }\r\n        }\r\n\r\n        // Generate dot product of each of the points for shape 2\r\n        // and the perpendicular line\r\n        for (var j = 0; j < shape2Points.length; j += 2) {\r\n            dot = shape2Points[j] * perpendicularStack[i] + shape2Points[j + 1] * perpendicularStack[i + 1];\r\n\r\n            if(bMax === null || dot > bMax){\r\n                bMax = dot;\r\n            }\r\n\r\n            if(bMin === null || dot < bMin){\r\n                bMin = dot;\r\n            }\r\n        }\r\n\r\n       \r\n        // Determine if there is an overlap. If there is no overlap\r\n        // there is no collision, and collision detection can return false\r\n        if((aMin <= bMax && aMin >= bMin) || (bMin <= aMax && bMin >= aMin)){\r\n            continue;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n\r\n    }\r\n    return true;\r\n\r\n\r\n}\r\n\r\n\r\n// Generate edges\r\nfunction generateEdges(shapePoints) {\r\n    var edges = []\r\n\r\n    for (var i = 2; i < shapePoints.length; i++) {\r\n        edges.push(shapePoints[i] - shapePoints[i - 2]);\r\n    }\r\n\r\n    edges.push(shapePoints[0] - shapePoints[shapePoints.length - 2]);\r\n    edges.push(shapePoints[1] - shapePoints[shapePoints.length - 1])\r\n\r\n    return edges;\r\n\r\n}","import { entity } from 'simpler-state';\n\nexport const map = entity(null);\n\nexport const setMap = (mapToView) => {\n\n    map.set(mapToView);\n\n}","import React, { useState, useRef, useEffect } from 'react';\r\n\r\nimport {\r\n    Toolbar,\r\n    Modal,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Paper,\r\n    Button,\r\n    TextField\r\n} from '@material-ui/core';\r\n\r\nimport NavBar from '../../components/CreateMapPageNavBar';\r\nimport CreateMapSidebar from '../../components/CreateMapSidebar';\r\nimport CreateMapObjectPropertiesSidebar from '../../components/CreateMapObjectPropertiesSidebar';\r\nimport CreateMapCanvas from '../../components/CreateMapCanvas';\r\nimport CreateMapProgressTracker from '../../components/CreateMapProgressTracker';\r\nimport ColourPicker from '../../components/ColourPicker';\r\n\r\nimport firebase from '../../utils/firebase';\r\nimport { getGuides } from '../../utils/snapGuidesGeneration.js';\r\nimport { categories } from '../../utils/categories.js';\r\nimport { isColliding } from '../../utils/collisionDetection';\r\nimport { loggedInUser, setUser } from '../../utils/userState';\r\nimport { map } from '../../utils/mapState';\r\n\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { useStyles } from '../../components/style.js';\r\n\r\nconst CreateMapPage = () => {\r\n\r\n    const [objectCategories, setObjectCategories] = useState(categories);\r\n    const classes = useStyles();\r\n    const [shapes, setShapes] = useState([]);\r\n    const [savedShapes, setSavedShapes] = useState([]);\r\n    const [lineGuides, setLineGuides] = useState([]);\r\n    const [selectedIndex, setSelectedIndex] = useState(-1);\r\n    const [viewCategoryEditModal, setViewCategoryEditModal] = useState(false);\r\n    const [viewAddCategoryModal, setViewAddCategoryModal] = useState(false);\r\n    const [newCategoryName, setNewCategoryName] = useState(\"\");\r\n    const [newCategoryMainColour, setNewCategoryMainColour] = useState(\"\");\r\n    const [newCategoryFontColour, setNewCategoryFontColour] = useState(\"\");\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const [buildingBeingViewed, setBuildingBeingViewed] = useState(null);\r\n    const [floorBeingViewed, setFloorBeingViewed] = useState(0);\r\n    const layerRef = useRef();\r\n    const stageRef = useRef();\r\n    const [mapName, setMapName] = useState(\"\");\r\n    const [editingMap, setEditingMap] = useState(false);\r\n\r\n    // var collisionTest = false;\r\n\r\n    // collisionTest = isColliding([13, 10, 13, 3, 6, 3, 6, 10], [14, 18, 15, 11, 10, 13]);\r\n    // if(collisionTest === true){\r\n    //     console.log(\"Colliding\")\r\n    // }\r\n    // else{\r\n    //     console.log(\"Not Colliding\")\r\n    // }\r\n\r\n    // collisionTest = isColliding([11, 10, 11, 3, 4, 3, 4, 10], [13, 13, 8, 9, 7, 15]);\r\n    // if(collisionTest === true){\r\n    //     console.log(\"Colliding\")\r\n    // }\r\n    // else{\r\n    //     console.log(\"Not Colliding\")\r\n    // }\r\n\r\n    const mapToEdit = map.use();\r\n\r\n    var userID = loggedInUser.use()\r\n\r\n    useEffect(() => {\r\n        if (mapToEdit !== null) {\r\n\r\n            for (var i = 0; i < mapToEdit[1][\"mapData\"].length; i++) {\r\n\r\n                if (mapToEdit[1][\"mapData\"][i].name === \"building\") {\r\n                    for (var j = 0; j < mapToEdit[1][\"mapData\"][i].internal.length; j++) {\r\n                        if (mapToEdit[1][\"mapData\"][i].internal[j][0] === \"empty\") {\r\n                            mapToEdit[1][\"mapData\"][i].internal[j][0] = [];\r\n                        }\r\n                    }\r\n\r\n                    if (mapToEdit[1][\"mapData\"][i].lifts[0] === \"empty\") {\r\n                        mapToEdit[1][\"mapData\"][i].lifts = [];\r\n                        console.log(mapToEdit[1][\"mapData\"][i]);\r\n                    }\r\n\r\n                    if (mapToEdit[1][\"mapData\"][i].stairs[0] === \"empty\") {\r\n                        mapToEdit[1][\"mapData\"][i].stairs = [];\r\n                    }\r\n                }\r\n            }\r\n\r\n            setShapes([...mapToEdit[1][\"mapData\"]]);\r\n            setObjectCategories(mapToEdit[1][\"categories\"])\r\n            setMapName(mapToEdit[1][\"mapName\"])\r\n            setEditingMap(true);\r\n\r\n        }\r\n    }, [])\r\n\r\n    // Create a new shape\r\n    function createShape(shapeType) {\r\n\r\n        // General shared attributes\r\n        var x = window.innerWidth / 8;\r\n        var y = document.documentElement.clientWidth / 8;\r\n        var width = 0;\r\n        var height = 0;\r\n        var label = \"\";\r\n        var category = 1;\r\n        var fontSize = 15;\r\n\r\n        // Assign updated values based on shapeType\r\n        if (shapeType === \"building\") {\r\n            width = 100;\r\n            height = 100;\r\n            label = \"Building\";\r\n            category = 0;\r\n        }\r\n        else if (shapeType === \"room\") {\r\n            width = 10;\r\n            height = 10;\r\n            label = \"Room\";\r\n            fontSize = 4;\r\n\r\n            x = savedShapes[buildingBeingViewed].x + savedShapes[buildingBeingViewed].width / 2;\r\n            y = savedShapes[buildingBeingViewed].y + savedShapes[buildingBeingViewed].height / 2;\r\n\r\n        }\r\n        else if (shapeType === \"path\") {\r\n            width = 50;\r\n            height = 50;\r\n\r\n        }\r\n        else {\r\n            width = 10;\r\n            height = 10;\r\n        }\r\n\r\n        // Create basic new shape\r\n        var newShape = {\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height,\r\n            selected: false,\r\n            label: label,\r\n            fontSize: fontSize,\r\n            name: shapeType,\r\n            selected: false,\r\n            textAlign: \"center\",\r\n            rotation: 0,\r\n            category: category,\r\n            points: [x,\r\n                y,\r\n                x + width,\r\n                y,\r\n                x + width,\r\n                y + height,\r\n                x,\r\n                y + height\r\n            ]\r\n        }\r\n\r\n        // Add additional parameters based on shapeType\r\n        if (shapeType === \"building\") {\r\n            newShape.internal = [[]];\r\n            newShape.lifts = [];\r\n            newShape.stairs = [];\r\n            newShape.entrance = null;\r\n        }\r\n        else if (shapeType === \"lifts\" || shapeType === \"stairs\") {\r\n            var floors = [];\r\n\r\n            for (var i = 0; i < savedShapes[buildingBeingViewed].internal.length; i++) {\r\n                floors.push(false);\r\n            }\r\n\r\n            floors[floorBeingViewed] = true;\r\n            newShape.floors = floors;\r\n            newShape.index = savedShapes[buildingBeingViewed][shapeType].length;\r\n        }\r\n        else if (shapeType === \"entrance\") {\r\n            newShape.floorNumber = floorBeingViewed;\r\n        }\r\n\r\n        // Add shape to list\r\n        var allShapes = [...shapes];\r\n\r\n        allShapes.push(newShape);\r\n\r\n        // Assign new shape as attribute if activeStep is 1 and based on shapeType\r\n        if (activeStep === 1) {\r\n            if (shapeType === \"lifts\") {\r\n                savedShapes[buildingBeingViewed].lifts.push(newShape);\r\n            }\r\n            else if (shapeType === \"stairs\") {\r\n                savedShapes[buildingBeingViewed].stairs.push(newShape);\r\n            }\r\n            else if (shapeType === \"entrance\") {\r\n                savedShapes[buildingBeingViewed].entrance = newShape;\r\n            }\r\n            else {\r\n                savedShapes[buildingBeingViewed].internal[floorBeingViewed].push(newShape);\r\n            }\r\n\r\n        }\r\n\r\n        // Update shapes\r\n        setShapes(allShapes);\r\n    }\r\n\r\n    // Add new floor to buildings\r\n    function addFloor() {\r\n\r\n        // Push empty array to internal attribute for building\r\n        savedShapes[buildingBeingViewed].internal.push([]);\r\n\r\n        // Update lifts and stairs to account for the new floor\r\n        var lifts = savedShapes[buildingBeingViewed].lifts;\r\n\r\n        for (var i = 0; i < lifts.length; i++) {\r\n            lifts[i].floors.push(false);\r\n        }\r\n\r\n        var stairs = savedShapes[buildingBeingViewed].stairs\r\n\r\n        for (var i = 0; i < stairs.length; i++) {\r\n            stairs[i].floors.push(false);\r\n        }\r\n\r\n        // Update shapes state\r\n        savedShapes[buildingBeingViewed].lifts = lifts;\r\n        savedShapes[buildingBeingViewed].stairs = stairs;\r\n        setSavedShapes([...savedShapes])\r\n    }\r\n\r\n    // Update accessibility of lift/staircase\r\n    function updateLiftStaircaseAccessibility(name, floorIndexes, index) {\r\n\r\n        // Loop through the floors in the lift/staircase\r\n        for (var i = 0; i < savedShapes[buildingBeingViewed][name][index].floors.length; i++) {\r\n\r\n            // If index i is contained within the new indexes, mark it as accessible\r\n            if (floorIndexes.includes(i)) {\r\n                savedShapes[buildingBeingViewed][name][index].floors[i] = true;\r\n            }\r\n            else {\r\n                savedShapes[buildingBeingViewed][name][index].floors[i] = false;\r\n            }\r\n        }\r\n\r\n        // Update saved shapes\r\n        setSavedShapes([...savedShapes])\r\n    }\r\n\r\n    // When dragging starts, update the selected index\r\n    function dragStart(e, index) {\r\n        var allShapes = [...shapes];\r\n        setShapes(allShapes);\r\n        setSelectedIndex(index);\r\n    }\r\n\r\n    // Event handler for moving a shape\r\n    function dragMove(e, index) {\r\n\r\n        // Get shapesthat are currently on the canvas\r\n        var shapesOnCanvas = layerRef.current.getChildren(function (node) {\r\n            return node.getClassName() === 'Group';\r\n        });\r\n\r\n        // for (var i = 0; i < shapesOnCanvas.length; i++) {\r\n        //     if (e.target.index !== i) {\r\n        //         console.log(isColliding(e.target, shapesOnCanvas[i]));\r\n        //     }\r\n        // }\r\n\r\n        // Generate guidelines for snapping\r\n        var guides = getGuides(e.target, shapesOnCanvas, stageRef);\r\n\r\n        // If no guides created, return\r\n        if (!guides.length) {\r\n            return;\r\n        }\r\n\r\n        // Retrieve absolute position of shape being being moved\r\n        var absolutePosition = e.target.absolutePosition();\r\n\r\n        // Generate absolute position for each created guidelines and set it\r\n        guides.forEach((lg) => {\r\n            switch (lg.snap) {\r\n                case 'start': {\r\n                    switch (lg.orientation) {\r\n                        case 'V': {\r\n                            absolutePosition.x = lg.lineGuide + lg.offset;\r\n                            break;\r\n                        }\r\n                        case 'H': {\r\n                            absolutePosition.y = lg.lineGuide + lg.offset;\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case 'center': {\r\n                    switch (lg.orientation) {\r\n                        case 'V': {\r\n                            absolutePosition.x = lg.lineGuide + lg.offset;\r\n                            break;\r\n                        }\r\n                        case 'H': {\r\n                            absolutePosition.y = lg.lineGuide + lg.offset;\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case 'end': {\r\n                    switch (lg.orientation) {\r\n                        case 'V': {\r\n                            absolutePosition.x = lg.lineGuide + lg.offset;\r\n                            break;\r\n                        }\r\n                        case 'H': {\r\n                            absolutePosition.y = lg.lineGuide + lg.offset;\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n\r\n        // Update absolute position of shape and set line guides\r\n        e.target.absolutePosition(absolutePosition)\r\n\r\n        setLineGuides(guides);\r\n    }\r\n\r\n    // Event handler for end of dragging\r\n    function dragEnd(e, index) {\r\n        // Retrieve shapes\r\n        var allShapes = [...shapes];\r\n        var shape = e.target;\r\n\r\n        // Update x and y positions for shape\r\n        allShapes[index][\"x\"] = Math.floor(shape.x());\r\n        allShapes[index][\"y\"] = Math.floor(shape.y());\r\n\r\n        // Update points\r\n        updatePoints(index);\r\n\r\n        // Reset line guides\r\n        setLineGuides([]);\r\n\r\n        // if (e.target.getName() !== \"path\") {\r\n        //     var paths = layerRef.current.getChildren(function (node) {\r\n        //         return node.getName() === \"path\";\r\n        //     });\r\n\r\n        //     for (var i = 0; i < paths.length; i++) {\r\n        //         if (isColliding(e.target, paths[i])) {\r\n        //             allShapes[index][\"collision\"] = true;\r\n        //         }\r\n        //         else {\r\n        //             allShapes[index][\"collision\"] = false;\r\n        //         }\r\n\r\n        //     }\r\n        // }\r\n\r\n        // Update shapes\r\n        setShapes(allShapes);\r\n\r\n    }\r\n\r\n    // Update the points attribute of a shape based on rotation\r\n    function updatePoints(index) {\r\n\r\n        // Get shape to update\r\n        var allShapes = [...shapes];\r\n        var shapeToUpdate = allShapes[selectedIndex];\r\n\r\n        // Calculate the new points without rotation\r\n        var points = [shapeToUpdate.x,\r\n        shapeToUpdate.y,\r\n        shapeToUpdate.x + shapeToUpdate.width,\r\n        shapeToUpdate.y,\r\n        shapeToUpdate.x + shapeToUpdate.width,\r\n        shapeToUpdate.y - shapeToUpdate.height,\r\n        shapeToUpdate.x,\r\n        shapeToUpdate.y - shapeToUpdate.height\r\n        ];\r\n\r\n        // Apply rotation\r\n        for (var i = 0; i < 8; i += 2) {\r\n\r\n            var newPoint = rotatePoint(points[i], points[i + 1], shapeToUpdate.x, shapeToUpdate.y, shapeToUpdate.rotation);\r\n            points[i] = newPoint.x;\r\n            points[i + 1] = newPoint.y;\r\n        }\r\n\r\n        // Update property\r\n        shapeToUpdate.points = points;\r\n        allShapes[index] = shapeToUpdate;\r\n        setShapes(allShapes);\r\n    }\r\n\r\n    // Rotate a point\r\n    function rotatePoint(pointX, pointY, originX, originY, rotation) {\r\n        var angle = rotation * (-Math.PI / 180);\r\n\r\n        var rotatedX = Math.cos(angle) * (pointX - originX) - Math.sin(angle) * (pointY - originY) + originX;\r\n\r\n        var rotatedY = -Math.sin(angle) * (pointX - originX) - Math.cos(angle) * (pointY - originY) + originY;\r\n\r\n        return { x: rotatedX, y: rotatedY };\r\n    }\r\n\r\n    // Update a property for a shape\r\n    function updatePropertiesOfShape(propertyName, propertyValue) {\r\n\r\n        var allShapes = [...shapes];\r\n        allShapes[selectedIndex][propertyName] = propertyValue;\r\n        setShapes(allShapes);\r\n\r\n    }\r\n\r\n    // Set a shape as selected\r\n    function onSelect(index) {\r\n        var allShapes = [...shapes];\r\n\r\n        for (var i = 0; i < allShapes.length; i++) {\r\n            if (index === i) {\r\n                allShapes[i][\"selected\"] = true;\r\n            }\r\n            else {\r\n                allShapes[i][\"selected\"] = false;\r\n            }\r\n        }\r\n\r\n        setShapes(allShapes);\r\n        setSelectedIndex(index);\r\n    }\r\n\r\n    // Check if a shape is deselected\r\n    function checkDeselect(e) {\r\n        var clickedOnEmpty = e.target === e.target.getStage();\r\n\r\n        if (clickedOnEmpty) {\r\n            var shapesArray = [...shapes];\r\n            for (var i = 0; i < shapesArray.length; i++) {\r\n                shapesArray[i][\"selected\"] = false;\r\n            }\r\n            setShapes(shapesArray);\r\n            setSelectedIndex(-1);\r\n        }\r\n    }\r\n\r\n    // Edit a category\r\n    function editCategory(index, fieldName, fieldValue) {\r\n        var allCategories = objectCategories;\r\n        allCategories[index][fieldName] = fieldValue;\r\n        setObjectCategories(allCategories);\r\n    }\r\n\r\n    // Show category modal\r\n    function showAddCategoryModal() {\r\n\r\n        setNewCategoryName(\"\");\r\n        setNewCategoryMainColour(\"\");\r\n        setNewCategoryFontColour(\"\");\r\n        setViewAddCategoryModal(true);\r\n\r\n    }\r\n\r\n    // Add new category\r\n    function addCategory() {\r\n        // Validation to ensure all fields are filled out\r\n        if (newCategoryName === \"\" || newCategoryMainColour === \"\" || newCategoryFontColour === \"\") {\r\n            alert(\"Ensure All Fields Are Filled Out\");\r\n        }\r\n        else {\r\n\r\n            // Create object for new category\r\n            var newCategory = {\r\n                categoryName: newCategoryName,\r\n                mainColour: newCategoryMainColour,\r\n                fontColour: newCategoryFontColour\r\n            }\r\n\r\n            // Update categories\r\n            var allCategories = [...objectCategories];\r\n            allCategories.push(newCategory);\r\n            setObjectCategories(allCategories);\r\n\r\n            // Hide category modal\r\n            setViewAddCategoryModal(false);\r\n        }\r\n    }\r\n\r\n    // Validation for active step 1\r\n    function step0Validation() {\r\n\r\n        // Retrieve buildings and pathways\r\n        var buildings = shapes.filter(function (shape) {\r\n            return shape.name === \"building\";\r\n        });\r\n\r\n        var pathways = shapes.filter(function (shape) {\r\n            return shape.name === \"path\";\r\n        });\r\n\r\n        // Array to hold shapes that are not colliding\r\n        var nonCollisionShapes = [];\r\n\r\n        // Check if all buildings connect with at least one pathway\r\n        for (var i = 0; i < buildings.length; i++) {\r\n            var collision = false;\r\n            for (var j = 0; j < pathways.length; j++) {\r\n                if (isColliding(buildings[i], pathways[j])) {\r\n                    collision = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!collision) {\r\n                nonCollisionShapes.push(buildings[i]);\r\n            }\r\n\r\n        }\r\n\r\n        // Create initial value to assume all pathways are connected\r\n        var pathwaysConnected = true;\r\n\r\n        // If there is more than one pathway\r\n        if (pathways.length > 1) {\r\n\r\n            // Check if all pathways collide with another pathway\r\n            for (var i = 0; i < pathways.length; i++) {\r\n                var collision = false;\r\n                for (var j = 0; j < pathways.length; j++) {\r\n                    if (i !== j) {\r\n                        if (isColliding(pathways[i], pathways[j])) {\r\n                            collision = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // If collision is false, set pathways connected to false and break from loop\r\n                if (!collision) {\r\n                    pathwaysConnected = false;\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // If valid, move to next step.\r\n        if (nonCollisionShapes.length === 0 && pathwaysConnected) {\r\n            return true;\r\n        }\r\n        else {\r\n\r\n            // Generate error messages\r\n            var message = \"\";\r\n\r\n            if (!pathwaysConnected) {\r\n                message = \"Ensure Pathways Are Connected To Each Other\";\r\n            }\r\n\r\n            if (nonCollisionShapes.length !== 0) {\r\n                var nonCollisionShapeLabels = \"\";\r\n\r\n                for (var i = 0; i < nonCollisionShapes.length; i++) {\r\n                    nonCollisionShapeLabels = nonCollisionShapeLabels + nonCollisionShapes[i].label + \" \";\r\n                }\r\n\r\n                message += \"\\nEnsure Following Buildings Touch A Pathway: \" + nonCollisionShapeLabels\r\n            }\r\n\r\n            // Display error message\r\n            alert(message);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Validation for when active step is 1\r\n    function step1Validation() {\r\n\r\n        // Retrieve building shapes\r\n        var buildings = savedShapes.filter(function (shape) {\r\n            return shape.name === \"building\";\r\n        });\r\n\r\n        // Initial values\r\n        var nonCollisionShapes = [];\r\n        var pathwaysConnected = true;\r\n        var liftsConnected = true;\r\n        var stairsConnected = true;\r\n\r\n        // Loop through buildings that were retrieved\r\n        for (var i = 0; i < buildings.length; i++) {\r\n\r\n            // Get internal structure, lifts and stairs\r\n            var internal = buildings[i].internal;\r\n            var lifts = buildings[i].lifts;\r\n            var stairs = buildings[i].stairs;\r\n\r\n            // Loop through internal structure\r\n            for (var j = 0; j < internal.length; j++) {\r\n                var floor = internal[j];\r\n\r\n                // Loop through floors\r\n                for (var k = 0; k < floor.length; k++) {\r\n\r\n                    // Get rooms and pathways\r\n                    var rooms = floor.filter(function (shape) {\r\n                        return shape.name === \"room\";\r\n                    });\r\n\r\n                    var pathways = floor.filter(function (shape) {\r\n                        return shape.name === \"path\";\r\n                    });\r\n\r\n                    // Check if lifts are connected to at least one pathway\r\n                    for (var l = 0; l < lifts.length; l++) {\r\n                        console.log(lifts[l]);\r\n                        if (lifts[l].floors[j]) {\r\n\r\n                            var connected = false;\r\n                            for (var m = 0; m < pathways.length; m++) {\r\n                                if (isColliding(lifts[l], pathways[m])) {\r\n                                    connected = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (!connected) {\r\n                                liftsConnected = false;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    // Check if staircases are connected to at least one pathway\r\n                    for (var l = 0; l < stairs.length; l++) {\r\n                        if (stairs[l].floors[j]) {\r\n                            var connected = false;\r\n                            for (var m = 0; m < pathways.length; m++) {\r\n                                if (isColliding(stairs[l], pathways[m])) {\r\n                                    connected = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            if (!connected) {\r\n                                stairsConnected = false;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                    // Check if pathways are connected to each other\r\n                    if (pathways.length > 1) {\r\n                        for (var l = 0; l < pathways.length; l++) {\r\n                            var collision = false;\r\n                            for (var m = 0; m < pathways.length; m++) {\r\n                                if (l !== m) {\r\n                                    if (isColliding(pathways[l], pathways[m])) {\r\n                                        collision = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (!collision) {\r\n                                pathwaysConnected = false;\r\n                                break;\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    // Check if rooms are connected to a pathway\r\n                    for (var l = 0; l < rooms.length; l++) {\r\n                        var collision = false;\r\n                        for (var m = 0; m < pathways.length; m++) {\r\n                            if (isColliding(rooms[l], pathways[m])) {\r\n                                collision = true;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (!collision) {\r\n\r\n                            nonCollisionShapes.push(rooms[l]);\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If valid move to next step\r\n        if (nonCollisionShapes.length === 0 && pathwaysConnected && liftsConnected && stairsConnected) {\r\n            // console.log(\"valid\");\r\n            // // setSavedShapes([...shapes]);\r\n            // // setShapes([]);\r\n            return true;\r\n        }\r\n        else {\r\n            // Generate error message\r\n            var message = \"\";\r\n            if (nonCollisionShapes.length !== 0) {\r\n                message += \"Ensure All Rooms Are Connected To Pathways\";\r\n            }\r\n            if (!pathwaysConnected) {\r\n                message += \"\\nEnsure All Pathways Are Connected With Each Other\";\r\n            }\r\n            if (!liftsConnected) {\r\n                message += \"\\nEnsure All lifts Are Connected To Pathways\";\r\n            }\r\n            if (!stairsConnected) {\r\n                message += \"\\nEnsure All Staircases Are Connected To Pathways\";\r\n            }\r\n\r\n            // Display error message\r\n            alert(message);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Increment step\r\n    function incrementStep() {\r\n\r\n        if (activeStep === 0) {\r\n            if (step0Validation()) {\r\n                setSavedShapes([...shapes]);\r\n                setShapes([]);\r\n                setActiveStep(activeStep + 1);\r\n\r\n            }\r\n        }\r\n        else if (activeStep === 1) {\r\n            if (step1Validation()) {\r\n                setActiveStep(activeStep + 1);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Decrement Step\r\n    function decrementStep() {\r\n        if (activeStep != 0) {\r\n            setShapes([...savedShapes]);\r\n            setActiveStep(activeStep - 1);\r\n        }\r\n\r\n    }\r\n\r\n    // Function to view floors when a floor is selected \r\n    function viewFloor(floorNumber) {\r\n\r\n        // Update floor number\r\n        setFloorBeingViewed(floorNumber);\r\n\r\n        // Generate array of internal structure of floor with lifts and stairs\r\n        var floorShapes = [...savedShapes[buildingBeingViewed].internal[floorNumber]];\r\n        floorShapes = floorShapes.concat(floorShapes, savedShapes[buildingBeingViewed].lifts);\r\n        floorShapes = floorShapes.concat(floorShapes, savedShapes[buildingBeingViewed].stairs);\r\n\r\n        if (savedShapes[buildingBeingViewed].entrance !== null) {\r\n            // Add entrance to floorShapes if it is on the same floor\r\n            if (savedShapes[buildingBeingViewed].entrance.floorNumber === floorNumber) {\r\n                floorShapes.push(savedShapes[buildingBeingViewed].entrance);\r\n            }\r\n        }\r\n\r\n        // Update shapes state\r\n        setShapes(floorShapes);\r\n    }\r\n\r\n    // Set building being viewed\r\n    function setBuildingBeingViewedHandler(buildingKey) {\r\n        setBuildingBeingViewed(buildingKey);\r\n        setFloorBeingViewed(0);\r\n        setShapes([]);\r\n    }\r\n\r\n    // Clear shapes\r\n    function clearShapes() {\r\n        setShapes([]);\r\n        setBuildingBeingViewed(null);\r\n    }\r\n\r\n    function generateCode(length) {\r\n        var chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n        var result = '';\r\n        for (var i = length; i > 0; --i) {\r\n            result += chars[Math.round(Math.random() * (chars.length - 1))];\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function deleteSelected(){\r\n        console.log(shapes[selectedIndex])\r\n        if(activeStep === 0){\r\n            var shapesUpdated = [];\r\n            for(var i = 0; i < shapes.length; i++){\r\n                if(i !== selectedIndex){\r\n                    shapesUpdated.push(shapes[i]);\r\n                }\r\n            }\r\n            setShapes([...shapesUpdated])\r\n            setSelectedIndex(-1);\r\n        }\r\n    }\r\n\r\n    // Function to save map to firebase\r\n    function saveMap() {\r\n\r\n        // Loop through savedShapes and insert placeholder into \r\n        // empty arrays in order to save it into Firebase\r\n        for (var i = 0; i < savedShapes.length; i++) {\r\n            if (savedShapes[i].name === \"building\") {\r\n                for (var j = 0; j < savedShapes[i].internal.length; j++) {\r\n                    if (savedShapes[i].internal[j].length === 0) {\r\n                        savedShapes[i].internal[j].push(\"empty\");\r\n                    }\r\n                }\r\n\r\n                if (savedShapes[i].lifts.length === 0) {\r\n                    savedShapes[i].lifts.push(\"empty\");\r\n                }\r\n                if (savedShapes[i].stairs.length === 0) {\r\n                    savedShapes[i].stairs.push(\"empty\");\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        var nowDate = new Date();\r\n        var date = nowDate.getDate() + '/' + (nowDate.getMonth() + 1) + '/' + nowDate.getFullYear();\r\n\r\n        // Combine map name, categories and mapdata in to single object\r\n        var mapData = {\r\n            mapName: mapName,\r\n            categories: objectCategories,\r\n            mapData: savedShapes,\r\n            userID: userID,\r\n            active: true,\r\n            updatedDate: date,\r\n        }\r\n\r\n        if (!editingMap) {\r\n            mapData.createdDate = date;\r\n            mapData.code = generateCode(6);\r\n        }\r\n\r\n        // Push data to database\r\n        var db = firebase.database();\r\n        if (editingMap) {\r\n            db.ref(\"MapData/\" + mapToEdit[0]).update({\r\n                mapName: mapName,\r\n                categories: objectCategories,\r\n                mapData: savedShapes,\r\n                userID: userID,\r\n                active: true,\r\n                updatedDate: date,\r\n            })\r\n        }\r\n        else {\r\n            var ref = db.ref(\"MapData\");\r\n            ref.push(mapData);\r\n        }\r\n\r\n        window.location.href='#/admin'\r\n    }\r\n\r\n    function checkLoggedIn() {\r\n        if (userID === null) {\r\n            \r\n            return <Redirect to='/' />;\r\n        }\r\n        else{\r\n            userID = userID.uid;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {checkLoggedIn()}\r\n            <div className={classes.root}>\r\n                <NavBar incrementStep={incrementStep} decrementStep={decrementStep} />\r\n                <CreateMapSidebar activeStep={activeStep} buttonClick={createShape} buildingBeingViewed={buildingBeingViewed} />\r\n                <main className={classes.content}>\r\n                    <Toolbar />\r\n                    <div>\r\n                        <CreateMapProgressTracker\r\n                            activeStep={activeStep}\r\n                            buildingBeingViewed={savedShapes[buildingBeingViewed]}\r\n                        />\r\n                    </div>\r\n\r\n                    <CreateMapCanvas\r\n                        dragStart={dragStart}\r\n                        dragMove={dragMove}\r\n                        dragEnd={dragEnd}\r\n                        guides={lineGuides}\r\n                        shapes={shapes}\r\n                        layerRef={layerRef}\r\n                        stageRef={stageRef}\r\n                        onSelect={onSelect}\r\n                        updateProperty={updatePropertiesOfShape}\r\n                        checkDeselect={checkDeselect}\r\n                        categories={objectCategories}\r\n                        updatePoints={updatePoints}\r\n                        activeStep={activeStep}\r\n                        buildingBeingViewed={savedShapes[buildingBeingViewed]}\r\n                        floorBeingViewed={floorBeingViewed}\r\n                    />\r\n                </main>\r\n                <CreateMapObjectPropertiesSidebar\r\n                    setBuildingBeingViewed={setBuildingBeingViewedHandler}\r\n                    buildingBeingViewed={savedShapes[buildingBeingViewed]}\r\n                    properties={shapes[selectedIndex]}\r\n                    updateProperty={updatePropertiesOfShape}\r\n                    savedShapes={savedShapes}\r\n                    categories={objectCategories}\r\n                    showCategoryModal={() => setViewCategoryEditModal(true)}\r\n                    activeStep={activeStep}\r\n                    clearShapes={clearShapes}\r\n                    setFloorBeingViewed={viewFloor}\r\n                    addFloor={addFloor}\r\n                    updateLiftStaircaseAccessibility={updateLiftStaircaseAccessibility}\r\n                    deleteSelected={deleteSelected}\r\n                />\r\n            </div>\r\n            {viewCategoryEditModal &&\r\n                <Modal\r\n                    open={viewCategoryEditModal}\r\n                    onClose={() => setViewCategoryEditModal(false)}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    <div className={classes.modalContent}>\r\n                        <Button onClick={() => setViewCategoryEditModal(false)} style={{ position: \"absolute\", top: 0, right: 0, margin: 10 }}>X</Button>\r\n\r\n                        <h2>View Categories</h2>\r\n                        <TableContainer component={Paper}>\r\n\r\n                            <Table className={classes.table} aria-label=\"simple table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Category Name</TableCell>\r\n                                        <TableCell align=\"center\">Shape Colour</TableCell>\r\n                                        <TableCell align=\"center\">Font Colour</TableCell>\r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {objectCategories.map((category, key) => {\r\n                                        return (\r\n                                            <TableRow key={key}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    <TextField\r\n                                                        defaultValue={category[\"categoryName\"]}\r\n                                                        onChange={(e) => editCategory(key, \"categoryName\", e.target.value)}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    \r\n                                                    <ColourPicker handleColourChange={(colour) => editCategory(key, \"mainColour\", colour)} colour={category[\"mainColour\"]} />\r\n                                                </TableCell>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    \r\n                                                    <ColourPicker handleColourChange={(colour) => editCategory(key, \"fontColour\", colour)} colour={category[\"fontColour\"]} />\r\n\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    })}\r\n\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                        <Button className={classes.modalButton} variant=\"contained\" color=\"primary\" onClick={showAddCategoryModal} style={{ float: \"right\" }}>Add New Category</Button>\r\n\r\n                    </div>\r\n                </Modal>}\r\n            {viewAddCategoryModal &&\r\n                <Modal\r\n                    open={viewAddCategoryModal}\r\n                    onClose={() => setViewAddCategoryModal(false)}\r\n                    aria-labelledby=\"simple-modal-title\"\r\n                    aria-describedby=\"simple-modal-description\"\r\n                >\r\n                    <div className={classes.modalContent}>\r\n                    <Button onClick={() => setViewAddCategoryModal(false)} style={{ position: \"absolute\", top: 0, right: 0, margin: 10 }}>X</Button>\r\n\r\n                        <h2>Add Categories</h2>\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            variant=\"outlined\"\r\n                            label=\"Category Name\"\r\n                            onChange={(e) => setNewCategoryName(e.target.value)}\r\n                        />\r\n\r\n                        <div className={classes.textField}>\r\n                            <p>Main Colour</p>\r\n                            <ColourPicker handleColourChange={(colour) => setNewCategoryMainColour(colour)} colour={\"#000000\"} />\r\n                        </div>\r\n\r\n                        <div className={classes.textField}>\r\n                            <p>Font Colour</p>\r\n                            <ColourPicker handleColourChange={(colour) => setNewCategoryFontColour(colour)} colour={\"#000000\"} />\r\n                        </div>\r\n                        <Button className={classes.modalButton} variant=\"contained\" color=\"primary\" onClick={addCategory} style={{ float: \"right\" }}>Save</Button>\r\n\r\n                    </div>\r\n                </Modal>}\r\n\r\n            <Modal\r\n                open={activeStep === 2}\r\n                onClose={() => setActiveStep(activeStep - 1)}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                <div className={classes.modalContent}>\r\n                    <h2>Save Map</h2>\r\n                    <TextField\r\n                        id={\"mapNameTextField\"}\r\n                        className={classes.textField}\r\n                        variant=\"outlined\"\r\n                        label=\"Map Name\"\r\n                        defaultValue={mapName}\r\n                        onChange={(e) => setMapName(e.target.value)}\r\n                    />\r\n                    <Button id={\"createMapButton\"} className={classes.modalButton} variant=\"contained\" color=\"primary\" onClick={saveMap} style={{ float: \"right\" }}>Save</Button>\r\n                </div>\r\n            </Modal>\r\n        </React.Fragment>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default CreateMapPage;","import React from 'react';\nimport { \n    Rect, \n    Group, \n    Text \n} from 'react-konva';\n\nconst ViewShape = (props) => {\n\n    // Change cursor on mouse enter\n    function mouseEnter(e){\n        const container = e.target.getStage().container();\n        container.style.cursor = \"pointer\";\n    }\n\n    // Change cursor on mouse leave\n    function mouseLeave(e){\n        const container = e.target.getStage().container();\n        container.style.cursor = \"default\";\n    }\n\n    var mouseHandlerProps = {};\n\n    if(props.shapeProps.name === \"building\"){\n        // Create mouse handler props\n        mouseHandlerProps = {\n            onClick: () => props.clickHandler(props.shapeProps.index),\n            onMouseEnter: mouseEnter,\n            onMouseLeave: mouseLeave\n\n        }\n    }\n\n    return (\n\n        <Group\n            shapePoints={props.shapeProps.points}\n            // key={props.index}\n            // index={props.index}\n\n            rotation={parseInt(props.shapeProps.rotation)}\n            x={props.shapeProps.x}\n            y={props.shapeProps.y}\n            // offsetX={props.shapeProps.width / 2}\n            // offsetY={props.shapeProps.height / 2}\n            width={props.shapeProps.width}\n            height={props.shapeProps.height}\n            name={props.shapeProps.name}\n            opacity={props.opacity}\n            {...mouseHandlerProps}\n        >\n\n            {/* Rectangle to represent building */}\n            <Rect\n                fill={props.shapeColour}\n                width={props.shapeProps.width}\n                height={props.shapeProps.height}\n            />\n\n            {/* Text component for label */}\n            <Text\n                text={props.shapeProps.label}\n                width={props.shapeProps.width}\n                height={props.shapeProps.height}\n                fontSize={parseInt(props.shapeProps.fontSize)}\n                fontFamily='Calibri'\n                fill={props.fontColour}\n                verticalAlign=\"middle\"\n                align={props.shapeProps.textAlign}\n            />\n\n        </Group>\n    )\n\n}\n\nexport default ViewShape;","import React, { useState } from 'react';\nimport { \n    Stage, \n    Layer, \n    Group \n} from 'react-konva';\n\nimport ViewShape from '../ViewShape';\n\nimport { useStyles } from '../style.js';\n\nconst ViewMapCanvas = (props) => {\n\n    const classes = useStyles();\n\n    const [stageScale, setStageScale] = useState(1);\n    const [stageX, setStageX] = useState(0);\n    const [stageY, setStageY] = useState(0);\n\n    function handleWheel(e) {\n        e.evt.preventDefault();\n\n        // Initial scale of stage\n        const scaleBy = 1.01;\n\n        // Stage in current form\n        const stage = e.target.getStage();\n\n        // Previous Scale\n        const oldScale = stage.scaleX();\n\n        // Find where mouse is pointing\n        const mousePointTo = {\n            x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\n            y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale\n        };\n\n        // Calculate and set new scale of stage\n        const newScale = e.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;\n        stage.scale({ x: newScale, y: newScale });\n\n        // Set properties with calculated values\n        setStageScale(newScale)\n        setStageX(-(mousePointTo.x - stage.getPointerPosition().x / newScale) * newScale);\n        setStageY(-(mousePointTo.y - stage.getPointerPosition().y / newScale) * newScale);\n\n    };\n\n    return (\n        <Stage\n            className={classes.viewMapCanvas}\n            width={props.width === undefined ? document.documentElement.clientWidth : props.width}\n            height={props.height === undefined ? document.documentElement.clientHeight : props.height}\n            onWheel={handleWheel}\n            scaleX={stageScale}\n            scaleY={stageScale}\n            draggable\n            x={stageX}\n            y={stageY}\n        >\n\n            <Layer>\n                <Group>\n                    {props.shapes != null && props.categories != null &&\n                        props.shapes.map((shape, key) => {\n\n                            // Determine shape fill and opacity\n                            var shapeFill = null;\n                            var opacity = 1;\n\n                            if(props.showingResult){\n                                if(shape.search) {\n                                    shapeFill = '#03b1fc';\n                                }\n                                else if(shape.origin) {\n                                    shapeFill = '#03fc0f';\n                                }\n                                else if(shape.destination) {\n                                    shapeFill = '#fc03ce';\n                                }\n                                else if(shape.pathwayShape) {\n                                    shapeFill = '#0000FF';\n                                }\n                                else{ \n                                    shapeFill = props.categories[shape.category].mainColour;\n                                    opacity = 0.5;\n                                }\n                            }\n                            else {\n                                shapeFill = props.categories[shape.category].mainColour;\n                            }\n\n                            return (\n                                <ViewShape\n                                    key={key}\n                                    shapeProps={shape}\n                                    shapeColour={shapeFill}\n                                    fontColour={props.categories[shape.category].fontColour}\n                                    opacity={opacity}\n                                    clickHandler={props.clickHandler}\n                                />\n                            );\n                        })\n                    }\n                </Group>\n\n            </Layer>\n\n        </Stage>\n    );\n}\n\nexport default ViewMapCanvas;","import React, { useState } from 'react';\n\nimport { \n    Stage, \n    Layer, \n    Text, \n    Rect \n} from 'react-konva';\n\nimport {\n    Button, \n    Modal\n} from '@material-ui/core';\n\nimport { useStyles } from '../style.js';\n\nconst ViewBuildingModal = (props) => {\n\n    const classes = useStyles();\n\n    const [stageScale, setStageScale] = useState(1);\n    const [stageX, setStageX] = useState(0);\n    const [stageY, setStageY] = useState(0);\n\n    function handleWheel(e) {\n        e.evt.preventDefault();\n\n        // Initial scale of stage\n        const scaleBy = 1.01;\n\n        // Stage in current form\n        const stage = e.target.getStage();\n\n        // Previous Scale\n        const oldScale = stage.scaleX();\n\n        // Find where mouse is pointing\n        const mousePointTo = {\n            x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,\n            y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale\n        };\n\n        // Calculate and set new scale of stage\n        const newScale = e.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;\n        stage.scale({ x: newScale, y: newScale });\n\n        // Set properties with calculated values\n        setStageScale(newScale)\n        setStageX(-(mousePointTo.x - stage.getPointerPosition().x / newScale) * newScale);\n        setStageY(-(mousePointTo.y - stage.getPointerPosition().y / newScale) * newScale);\n\n    };\n\n    // Current floor number\n    var floorNumber = 0;\n\n    // Determine number of columns (for displaying floors)\n    var cols = Math.ceil(Math.sqrt(props.building.internal.length));\n\n    // Determine initial x and y\n    var x = (-props.building.width - 50) + 50;\n    var y = 50;\n\n    // Current column number\n    var colNumber = 1;\n\n    return (\n\n        <Modal\n            aria-labelledby=\"transition-modal-title\"\n            aria-describedby=\"transition-modal-description\"\n            open={true}\n            onClose={props.handleClose}\n        >\n            <div className={classes.modalContent}>\n                <Button id={\"closeModalButton\"} onClick={props.handleClose} style={{ position: \"absolute\", top: 0, right: 0, margin: 10 }}>X</Button>\n\n                <h2>{props.building.label}</h2>\n                <Stage\n                    height={500}\n                    width={750}\n                    className={classes.viewMapCanvas}\n                    onWheel={handleWheel}\n                    scaleX={stageScale}\n                    scaleY={stageScale}\n                    draggable\n                    x={stageX}\n                    y={stageY}\n                >\n                    <Layer>\n                        \n                        {props.building.internal.map((shape, key) => {\n\n                            // If current column is greater than current column, reset values\n                            if (colNumber > cols) {\n                                colNumber = 1;\n                                x = 50;\n                                y += props.building.height + 50;\n                            }\n                            else {\n                                x += props.building.width + 50;\n\n                            }\n\n                            // Increment current column number and floor number\n                            colNumber++;\n                            floorNumber++;\n\n                            return (\n                                <React.Fragment>\n                                    <Text\n                                        x={x}\n                                        y={y - 20}\n                                        text={\"Floor \" + floorNumber}\n                                        fontSize={20}\n                                        fontFamily='Calibri'\n                                    />\n                                    <Rect\n                                        x={x}\n                                        y={y}\n                                        width={props.building.width}\n                                        height={props.building.height}\n                                        fill={props.categories[props.building.category].mainColour}\n                                    />\n\n                                    {props.building.internal[floorNumber - 1].map((shape, key) => {\n\n                                        // Determine shape fill colour and opacity of shape\n                                        var shapeFill = null;\n                                        var opacity = 1;\n\n                                        if (props.showingResult) {\n                                            if (shape.search) {\n                                                shapeFill = '#03b1fc';\n                                            }\n                                            else if (shape.origin) {\n                                                shapeFill = '#03fc0f';\n                                            }\n                                            else if (shape.destination) {\n                                                shapeFill = '#fc03ce';\n                                            }\n                                            else if (shape.pathwayShape) {\n                                                shapeFill = '#0000FF';\n                                            }\n                                            else {\n                                                shapeFill = props.categories[shape.category].mainColour;\n                                                opacity = 0.6;\n                                            }\n\n                                        }\n                                        else {\n                                            shapeFill = props.categories[shape.category].mainColour;\n                                        }\n\n                                        return (\n                                            <React.Fragment>\n                                                <Rect\n                                                    x={shape.x - props.building.x + x}\n                                                    y={shape.y - props.building.y + y}\n                                                    width={shape.width}\n                                                    height={shape.height}\n                                                    fill={shapeFill}\n                                                    opacity={opacity}\n\n                                                />\n                                                <Text\n                                                    x={shape.x - props.building.x + x}\n                                                    y={shape.y - props.building.y + y}\n                                                    text={shape.label}\n                                                    width={shape.width}\n                                                    height={shape.height}\n                                                    fontSize={parseInt(shape.fontSize)}\n                                                    fontFamily='Calibri'\n                                                    fill={props.categories[shape.category].fontColour}\n                                                    verticalAlign=\"middle\"\n                                                    align={shape.textAlign}\n                                                    opacity={opacity}\n                                                />\n\n                                            </React.Fragment>\n\n                                        );\n                                    })}\n\n                                    {/* Display lifts */}\n                                    {props.building.lifts.map((shape, key) => {\n\n                                        if (shape.floors[floorNumber - 1]) {\n                                            return (\n                                                <Rect\n                                                    x={shape.x - props.building.x + x}\n                                                    y={shape.y - props.building.y + y}\n                                                    width={shape.width}\n                                                    height={shape.height}\n                                                    fill={props.categories[shape.category].mainColour}\n                                                    opacity={props.showingResult ? 0.6 : 1}\n\n                                                />\n                                            );\n\n                                        }\n                                    })}\n\n                                    {/* Display lifts */}\n                                    {props.building.stairs.map((shape, key) => {\n                                        if (shape.floors[floorNumber - 1]) {\n                                            return (\n                                                <Rect\n                                                    x={shape.x - props.building.x + x}\n                                                    y={shape.y - props.building.y + y}\n                                                    width={shape.width}\n                                                    height={shape.height}\n                                                    fill={props.categories[shape.category].mainColour}\n                                                    opacity={props.showingResult ? 0.6 : 1}\n\n                                                />\n                                            );\n\n                                        }\n                                    })}\n\n                                    {/* Display entrance */}\n                                    {props.building.entrance !== undefined &&\n                                        props.building.entrance.floorNumber === floorNumber - 1 &&\n                                        <Rect\n                                            x={props.building.entrance.x - props.building.x + x}\n                                            y={props.building.entrance.y - props.building.y + y}\n                                            width={props.building.entrance.width}\n                                            height={props.building.entrance.height}\n                                            fill={props.categories[props.building.entrance.category].mainColour}\n                                            opacity={props.showingResult ? 0.6 : 1}\n\n                                        />\n\n                                    }\n                                </React.Fragment>\n                            );\n                        })}\n\n                    </Layer>\n                </Stage>\n            </div>\n        </Modal>\n\n    );\n};\n\nexport default ViewBuildingModal;","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\n\nimport { useStyles } from '../style.js';\n\nconst CategoryLegend = (props) => {\n    const classes = useStyles();\n\n    // Loop through categories and display \n    return (\n        <Paper className={classes.paper} style={{ marginTop: 100, width: 150, top: 0, right: 0 }} elevation={10}>\n            <div>\n\n                <div id={\"searchKey\"} style={{ margin: 10, float: \"left\", border: \"1px solid black\", height: \"10px\", width: \"10px\", backgroundColor: \"#03b1fc\" }} />\n                <p style={{ paddingTop: 5 }}> Search Result</p>\n\n                <div id={\"originhKey\"} style={{ margin: 10, float: \"left\", border: \"1px solid black\", height: \"10px\", width: \"10px\", backgroundColor: \"#03fc0f\" }} />\n                <p style={{ paddingTop: 5 }}> Origin</p>\n\n                <div id={\"destinationKey\"} style={{ margin: 10, float: \"left\", border: \"1px solid black\", height: \"10px\", width: \"10px\", backgroundColor: \"#fc03ce\" }} />\n                <p style={{ paddingTop: 5 }}> Destination</p>\n\n                <div id={\"routeKey\"} style={{ margin: 10, float: \"left\", border: \"1px solid black\", height: \"10px\", width: \"10px\", backgroundColor: \"#0000FF\" }} />\n                <p style={{ paddingTop: 5 }}> Route</p>\n\n                \n                {props.categories.map((category, key) => {\n                    return (\n                        <div id={\"legendKey\"} key={\"legend\" + key}>\n                            <div style={{ margin: 10, float: \"left\", border: \"1px solid black\", height: \"10px\", width: \"10px\", backgroundColor: category.mainColour }} />\n                            <p style={{ paddingTop: 5 }}> {category.categoryName}</p>\n                        </div>\n\n                    );\n\n                })}\n\n            </div>\n        </Paper>\n    );\n}\n\nexport default CategoryLegend;\n","import React from 'react';\n\nimport {\n    Modal,\n    Paper,\n    Button\n} from '@material-ui/core';\n\nimport { \n    Stage, \n    Layer, \n    Text, \n    Rect \n} from 'react-konva';\n\nimport Carousel from 'react-material-ui-carousel';\n\nimport ViewMapCanvas from '../ViewMapCanvas';\nimport { useStyles } from '../style.js';\n\nconst RouteFinderCarousel = (props) => {\n\n    const classes = useStyles();\n\n    return (\n        <Modal\n            open={true}\n            onClose={props.handleClose}\n        >\n            <div className={classes.modalContent}>\n                <Button id={\"closeModalButton\"} onClick={props.handleClose} style={{ position: \"absolute\", top: 0, right: 0, margin: 10 }}>X</Button>\n\n                <h2>Route</h2>\n                <Carousel>\n                    {props.pathway.map((path, key) => {\n                        var internalLevel = true;\n                        var buildingIndex = -1;\n\n                        // Loop through path\n                        for (var i = 0; i < path.length; i++) {\n\n                            // Through the map data\n                            for (var j = 0; j < props.mapData.length; j++) {\n\n                                // If shape in path is equal to map data shape, set it as pathway shape\n                                if (path[i][0].index === props.mapData[j].index) {\n                                    internalLevel = false;\n                                    buildingIndex = j;\n                                    props.mapData[j].pathwayShape = true;\n\n                                }\n\n                                // If shape in path is equal to origin, set it as origin\n                                else if (props.origin.index === props.mapData[j].index) {\n                                    props.mapData[j].origin = true;\n                                }\n\n                                // If shape in path is equal to destination, set it as origin\n                                else if (props.destination.index === props.mapData[j].index) {\n                                    props.mapData[j].destination = true;\n                                }\n\n                                // If shape represents building, check if pathway shape is internal\n                                if (props.mapData[j].name === \"building\") {\n\n                                    // Loop through internal structure of building\n                                    for (var k = 0; k < props.mapData[j].internal.length; k++) {\n\n                                        // Loop through floor\n                                        for (var l = 0; l < props.mapData[j].internal[k].length; l++) {\n\n                                            // Check if shape in path is equal and determine if shape is part of path\n                                            // or is origin or destination\n                                            if (path[i][0].index === props.mapData[j].internal[k][l].index) {\n                                                internalLevel = true;\n                                                props.mapData[j].internal[k][l].pathwayShape = true;\n                                                buildingIndex = j;\n                                            }\n                                            else if (props.origin.index === props.mapData[j].internal[k][l].index) {\n                                                props.mapData[j].internal[k][l].origin = true;\n                                            }\n                                            else if (props.destination.index === props.mapData[j].internal[k][l].index) {\n                                                props.mapData[j].internal[k][l].destination = true;\n                                            }\n                                            \n                                        }\n                                    }\n\n                                    // Loop through lifts to check if pathway shape is a lift\n                                    for (var k = 0; k < props.mapData[j].lifts.length; k++) {\n                                        if (path[i][0].index === props.mapData[j].lifts[k].index) {\n                                            props.mapData[j].lifts[k].pathwayShape = true;\n                                        }\n                                    }\n\n                                    // Loop through staircases to check if pathway shape is a staircase\n                                    for (var k = 0; k < props.mapData[j].stairs.length; k++) {\n                                        if (path[i][0].index === props.mapData[j].stairs[k].index) {\n                                            props.mapData[j].stairs[k].pathwayShape = true;\n                                        }\n                                    }\n\n                                }\n                            }\n                        }\n\n                        // If path represents shapes that are internal, display a map of the building floors\n                        if (internalLevel) {\n\n                            // Current floor number\n                            var floorNumber = 0;\n\n                            // Determine number of columns (for displaying floors)\n                            var cols = Math.ceil(Math.sqrt(props.mapData[buildingIndex].internal.length));\n\n                            // Determine initial x and y\n                            var x = (-props.mapData[buildingIndex].width - 50) + 50;\n                            var y = 50;\n\n                            // Current column number\n                            var colNumber = 1;\n\n                            return (\n                                <Paper>\n                                    <Stage\n                                        height={500}\n                                        width={750}\n                                        className={classes.viewMapCanvas}\n                                        // onWheel={handleWheel}\n                                        // scaleX={stageScale}\n                                        // scaleY={stageScale}\n                                        draggable\n                                        // x={stageX}\n                                        // y={stageY}\n                                    >\n                                        <Layer>\n                                            {props.mapData[buildingIndex].internal.map((shape, key) => {\n\n                                                // If current column is greater than current column, reset values\n                                                if (colNumber > cols) {\n                                                    colNumber = 1;\n                                                    x = 50;\n                                                    y += props.mapData[buildingIndex].height + 50;\n                                                }\n                                                else {\n                                                    x += props.mapData[buildingIndex].width + 50;\n\n                                                }\n\n                                                // Increment current column number and floor number\n                                                colNumber++;\n                                                floorNumber++;\n\n                                                return (\n                                                    <React.Fragment>\n                                                        <Text\n                                                            x={x}\n                                                            y={y - 20}\n                                                            text={\"Floor \" + floorNumber}\n                                                            fontSize={20}\n                                                            fontFamily='Calibri'\n                                                        />\n                                                        <Rect\n                                                            x={x}\n                                                            y={y}\n                                                            width={props.mapData[buildingIndex].width}\n                                                            height={props.mapData[buildingIndex].height}\n                                                            fill={props.categories[props.mapData[buildingIndex].category].mainColour}\n                                                        />\n\n                                                        {props.mapData[buildingIndex].internal[floorNumber - 1].map((shape, key) => {\n\n                                                            // Determine shape fill colour and opacity\n                                                            var shapeFill = null;\n                                                            var opacity = 1;\n\n                                                            if (shape.search) {\n                                                                shapeFill = '#03b1fc';\n                                                            }\n                                                            else if (shape.origin) {\n                                                                shapeFill = '#03fc0f';\n                                                            }\n                                                            else if (shape.destination) {\n                                                                shapeFill = '#fc03ce';\n                                                            }\n                                                            else if (shape.pathwayShape) {\n                                                                shapeFill = '#0000FF';\n                                                            }\n                                                            else {\n                                                                shapeFill = props.categories[shape.category].mainColour;\n                                                                opacity = 0.6;\n                                                            }\n\n                                                            return (\n                                                                <React.Fragment>\n                                                                    <Rect\n                                                                        x={shape.x - props.mapData[buildingIndex].x + x}\n                                                                        y={shape.y - props.mapData[buildingIndex].y + y}\n                                                                        width={shape.width}\n                                                                        height={shape.height}\n                                                                        fill={shapeFill}\n                                                                        opacity={opacity}\n\n                                                                    />\n                                                                    <Text\n                                                                        x={shape.x - props.mapData[buildingIndex].x + x}\n                                                                        y={shape.y - props.mapData[buildingIndex].y + y}\n                                                                        text={shape.label}\n                                                                        width={shape.width}\n                                                                        height={shape.height}\n                                                                        fontSize={parseInt(shape.fontSize)}\n                                                                        fontFamily='Calibri'\n                                                                        fill={props.categories[shape.category].fontColour}\n                                                                        verticalAlign=\"middle\"\n                                                                        align={shape.textAlign}\n                                                                        opacity={opacity}\n                                                                    />\n\n                                                                </React.Fragment>\n\n                                                            );\n                                                        })}\n\n                                                        {/* Display lifts */}\n                                                        {props.mapData[buildingIndex].lifts.map((shape, key) => {\n\n                                                            // Determine shape fill colour and opacity\n                                                            var shapeFill = null;\n                                                            var opacity = 1;\n                                                            if (shape.search) {\n                                                                shapeFill = '#03b1fc';\n                                                            }\n                                                            else if (shape.origin) {\n                                                                shapeFill = '#03fc0f';\n                                                            }\n                                                            else if (shape.destination) {\n                                                                shapeFill = '#fc03ce';\n                                                            }\n                                                            else if (shape.pathwayShape) {\n                                                                shapeFill = '#0000FF';\n                                                            }\n                                                            else {\n                                                                shapeFill = props.categories[shape.category].mainColour;\n                                                                opacity = 0.6;\n                                                            }\n\n                                                            // If lift is accessible through current floor display\n                                                            if (shape.floors[floorNumber - 1]) {\n                                                                return (\n                                                                    <Rect\n                                                                        x={shape.x - props.mapData[buildingIndex].x + x}\n                                                                        y={shape.y - props.mapData[buildingIndex].y + y}\n                                                                        width={shape.width}\n                                                                        height={shape.height}\n                                                                        fill={shapeFill}\n\n                                                                    />\n                                                                );\n\n                                                            }\n                                                        })}\n\n                                                        { /* Display lifts */}\n                                                        {props.mapData[buildingIndex].stairs.map((shape, key) => {\n\n                                                            // Determine shape fill colour and opacity\n                                                            var shapeFill = null;\n                                                            var opacity = 1;\n                                                            if (shape.search) {\n                                                                shapeFill = '#03b1fc';\n                                                            }\n                                                            else if (shape.origin) {\n                                                                shapeFill = '#03fc0f';\n                                                            }\n                                                            else if (shape.destination) {\n                                                                shapeFill = '#fc03ce';\n                                                            }\n                                                            else if (shape.pathwayShape) {\n                                                                shapeFill = '#0000FF';\n                                                            }\n                                                            else {\n                                                                shapeFill = props.categories[shape.category].mainColour;\n                                                                opacity = 0.6;\n                                                            }\n                                                            // If stair case is accessible through current floor\n                                                            if (shape.floors[floorNumber - 1]) {\n                                                                return (\n                                                                    <Rect\n                                                                        x={shape.x - props.mapData[buildingIndex].x + x}\n                                                                        y={shape.y - props.mapData[buildingIndex].y + y}\n                                                                        width={shape.width}\n                                                                        height={shape.height}\n                                                                        fill={props.categories[shape.category].mainColour}\n\n                                                                    />\n                                                                );\n\n                                                            }\n                                                        })}\n\n                                                        {/* Display entrance for building */}\n                                                        {props.mapData[buildingIndex].entrance !== undefined &&\n                                                            props.mapData[buildingIndex].entrance.floorNumber === floorNumber - 1 &&\n                                                            <Rect\n                                                                x={props.mapData[buildingIndex].entrance.x - props.mapData[buildingIndex].x + x}\n                                                                y={props.mapData[buildingIndex].entrance.y - props.mapData[buildingIndex].y + y}\n                                                                width={props.mapData[buildingIndex].entrance.width}\n                                                                height={props.mapData[buildingIndex].entrance.height}\n                                                                fill={\"#0000FF\"}\n\n                                                            />\n\n                                                        }\n                                                    </React.Fragment>\n                                                );\n                                            })}\n\n                                        </Layer>\n                                    </Stage>\n                                </Paper>\n                            );\n                        }\n                        else {\n                            return (\n                                <Paper>\n                                    <ViewMapCanvas height={500} width={750} clickHandler={() => {}} showingResult={true} shapes={props.mapData} categories={props.categories} />\n                                </Paper>\n                            );\n                        }\n\n                    })}\n                </Carousel>\n            </div>\n\n        </Modal>\n    );\n\n}\n\nexport default RouteFinderCarousel;","import { isColliding } from './collisionDetection';\r\n\r\n// shape\r\n// distance\r\n// visited\r\n// previousShape\r\n\r\nexport function dijkstra_buildingToBuilding(shapes, start, finish) {\r\n\r\n    var shapesToUse = [];\r\n\r\n    for (var i = 0; i < shapes.length; i++) {\r\n        if (shapes[i].name === \"path\") {\r\n            shapesToUse.push(shapes[i])\r\n        }\r\n    }\r\n\r\n    shapesToUse.push(start);\r\n    shapesToUse.push(finish);\r\n\r\n    var visitedNodesInOrder = [];\r\n    var unvisitedNodes = getAllNodes(shapesToUse, start);\r\n\r\n    while (unvisitedNodes.length) {\r\n\r\n        sortNodesByDistance(unvisitedNodes);\r\n        var closestNode = unvisitedNodes.shift();\r\n        closestNode[2] = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (areEqual(closestNode[0], finish)) {\r\n            return visitedNodesInOrder;\r\n        }\r\n\r\n        updateUnvisitedNeighbours(unvisitedNodes, closestNode);\r\n\r\n    }\r\n\r\n    return visitedNodesInOrder;\r\n}\r\n\r\nexport function dijkstra_roomToEntrance(mapData, start, accessibility) {\r\n    var visitedNodesInOrder = [];\r\n    var unvisitedNodes = getBuildingNodes(mapData, start);\r\n\r\n    var floorWithEntrance = -1;\r\n    var floorWithNode = -1;\r\n    var currentFloor = -1;\r\n\r\n    for (var i = 0; i < unvisitedNodes.length; i++) {\r\n        for (var j = 0; j < unvisitedNodes[i].length; j++) {\r\n            if (unvisitedNodes[i][j][0].name === \"entrance\") {\r\n                floorWithEntrance = i;\r\n            }\r\n            else if (start.index === unvisitedNodes[i][j][0].index) {\r\n                floorWithNode = i\r\n                unvisitedNodes[i][j][1] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    currentFloor = floorWithNode;\r\n\r\n    var checkPoint = null;\r\n\r\n    var sameFloor = true;\r\n\r\n    if (currentFloor !== floorWithEntrance) {\r\n\r\n        sameFloor = false;\r\n\r\n        while (unvisitedNodes[currentFloor].length) {\r\n            sortNodesByDistance(unvisitedNodes[currentFloor]);\r\n            var closestNode = unvisitedNodes[currentFloor].shift();\r\n            closestNode[2] = true;\r\n            visitedNodesInOrder.push(closestNode);\r\n\r\n            if (accessibility) {\r\n                if (closestNode[0].name === \"lifts\" && closestNode[0].floors[floorWithEntrance]) {\r\n                    checkPoint = closestNode[0];\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                if (closestNode[0].name === \"lifts\" || closestNode[0].name === \"stairs\" && closestNode[0].floors[floorWithEntrance]) {\r\n                    checkPoint = closestNode[0];\r\n                    break;\r\n                }\r\n            }\r\n\r\n\r\n            updateUnvisitedNeighbours(unvisitedNodes[currentFloor], closestNode);\r\n        }\r\n    }\r\n\r\n    if (sameFloor) {\r\n        checkPoint = start;\r\n    }\r\n\r\n    currentFloor = floorWithEntrance;\r\n\r\n    updateUnvisitedNeighbours(unvisitedNodes[currentFloor], visitedNodesInOrder[visitedNodesInOrder.length - 1])\r\n\r\n    while (unvisitedNodes[currentFloor].length) {\r\n        sortNodesByDistance(unvisitedNodes[currentFloor]);\r\n        var closestNode = unvisitedNodes[currentFloor].shift();\r\n        closestNode[2] = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if (closestNode[0].name === \"entrance\") {\r\n            break;\r\n        }\r\n\r\n        updateUnvisitedNeighbours(unvisitedNodes[currentFloor], closestNode);\r\n    }\r\n\r\n    return visitedNodesInOrder;\r\n\r\n}\r\n\r\nexport function getNodesInPathOrder(finish) {\r\n\r\n    var nodeInPathOrder = [];\r\n    var currentNode = finish;\r\n    while (currentNode !== null) {\r\n        nodeInPathOrder.unshift(currentNode);\r\n        currentNode = currentNode[3];\r\n    }\r\n\r\n    return nodeInPathOrder;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(shapes, node) {\r\n    var unvisitedNeighbours = getClosestShapes(shapes, node);\r\n\r\n    for (var neighbour of unvisitedNeighbours) {\r\n        neighbour[1] = node[1] + 1;\r\n        neighbour[3] = node;\r\n\r\n    }\r\n\r\n}\r\n\r\nfunction getAllNodes(shapes, start) {\r\n    var allNodes = [];\r\n    for (var i = 0; i < shapes.length; i++) {\r\n\r\n        allNodes.push([shapes[i], Infinity, false, null]);\r\n    }\r\n\r\n    allNodes[findIndex(allNodes, start)][1] = 0;\r\n    return allNodes;\r\n}\r\n\r\nfunction getBuildingNodes(mapData, start) {\r\n    var allNodes = [];\r\n    var building = getBuildingOfNode(mapData, start);\r\n\r\n    for (var i = 0; i < building.internal.length; i++) {\r\n        allNodes.push(floorToNodes(building.internal[i], start))\r\n\r\n        if (building.entrance !== undefined && building.entrance.floorNumber === i) {\r\n            allNodes[i].push([building.entrance, Infinity, false, null]);\r\n\r\n        }\r\n\r\n        for (var j = 0; j < building.lifts.length; j++) {\r\n            if (building.lifts[j].floors[i]) {\r\n                allNodes[i].push([building.lifts[j], Infinity, false, null]);\r\n            }\r\n        }\r\n        for (var j = 0; j < building.stairs.length; j++) {\r\n            if (building.stairs[j].floors[i]) {\r\n                allNodes[i].push([building.stairs[j], Infinity, false, null]);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return allNodes;\r\n}\r\n\r\nfunction floorToNodes(floor, start) {\r\n    var nodes = [];\r\n    for (var i = 0; i < floor.length; i++) {\r\n        if (floor[i].index === start.index || floor[i].name !== \"room\") {\r\n            nodes.push([floor[i], Infinity, false, null]);\r\n        }\r\n\r\n    }\r\n    return nodes;\r\n}\r\n\r\nfunction getBuildingOfNode(mapData, node) {\r\n    for (var i = 0; i < mapData.length; i++) {\r\n        if (mapData[i].name === \"building\") {\r\n            for (var j = 0; j < mapData[i].internal.length; j++) {\r\n                for (var k = 0; k < mapData[i].internal[j].length; k++) {\r\n                    if (mapData[i].internal[j][k].index === node.index) {\r\n                        return mapData[i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(nodes) {\r\n    nodes.sort(distanceComparator);\r\n\r\n}\r\n\r\nfunction distanceComparator(nodeA, nodeB) {\r\n    return (nodeA[1] < nodeB[1]) ? -1 : 1;\r\n}\r\n\r\n\r\nfunction getClosestShapes(shapes, start) {\r\n    var closestShapes = [];\r\n\r\n    for (var i = 0; i < shapes.length; i++) {\r\n\r\n\r\n        if (start[0].index !== shapes[i][0].index && isColliding(start[0], shapes[i][0])) {\r\n            closestShapes.push(shapes[i]);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return closestShapes;\r\n}\r\n\r\nfunction findIndex(shapesArray, shape) {\r\n    for (var i = 0; i < shapesArray.length; i++) {\r\n        var node = shapesArray[i][0];\r\n\r\n        if (areEqual(node, shape)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nfunction areEqual(shape1, shape2) {\r\n    return shape1.index === shape2.index;\r\n}","import React, { useState, useEffect } from 'react';\n\nimport {\n    TextField,\n    Fab,\n    Modal,\n    Button,\n    Paper,\n    useTheme,\n    useMediaQuery,\n    Checkbox,\n    FormControlLabel,\n    \n} from '@material-ui/core';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport ViewMapCanvas from '../../components/ViewMapCanvas';\nimport ViewBuildingModal from '../../components/ViewBuildingModal';\nimport CategoryLegend from '../../components/CategoryLegend';\nimport RouteFinderCarousel from '../../components/RouteFinderCarousel';\nimport NavBar from '../../components/NavBar';\n\nimport firebase from '../../utils/firebase';\nimport { dijkstra_buildingToBuilding, dijkstra_roomToEntrance, getNodesInPathOrder } from '../../utils/dijkstra';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faRoute } from '@fortawesome/free-solid-svg-icons'\nimport { faChevronCircleLeft } from '@fortawesome/free-solid-svg-icons'\n\nimport { useStyles } from '../../components/style.js';\n\nconst ViewMapPage = () => {\n\n    const classes = useStyles();\n    const [mapData, setMapData] = useState(null);\n    const [categories, setCategories] = useState([]);\n    const [showTextFields, setShowTextFields] = useState(false);\n    const [showSearchTextField, setShowSearchTextField] = useState(false);\n    const [showDirectionTextFields, setShowDirectionTextFields] = useState(false);\n    const [search, setSearch] = useState(null);\n    const [origin, setOrigin] = useState(null);\n    const [destination, setDestination] = useState(null);\n    const [showingResult, setShowingResult] = useState(false);\n    const [showBuildingModal, setShowBuildingModal] = useState(false);\n    const [buildingClicked, setBuildingClicked] = useState(null);\n    const [options, setOptions] = useState([]);\n    const [showRouteFinderCarousel, setShowRouteFinderCarousel] = useState(false);\n    const [pathwayShapes, setPathwayShapes] = useState([]);\n    const [showEnterCodeModal, setShowEnterCodeModal] = useState(true);\n    const [mapCode, setMapCode] = useState(\"\");\n    const [retrieveMapError, setRetrieveMapError] = useState(\"\");\n    const [showSearchDrawer, setShowSearchDrawer] = useState(false);\n    const [accessibility, setAccessibility] = useState(false)\n\n\n    useEffect(() => {\n        if (!showBuildingModal && mapData !== null) {\n            setShowingResult(false);\n            resetShapes();\n        }\n\n    }, [showBuildingModal, showRouteFinderCarousel])\n\n    function retrieveMap() {\n        setRetrieveMapError(\"\");\n        if (mapCode.length !== 6) {\n            setRetrieveMapError(\"Invalid Map Code\")\n            return;\n        }\n        var db = firebase.database();\n        var dbData = db.ref(\"MapData/\");\n\n        dbData.orderByChild('code').equalTo(mapCode).on(\"value\", function (snapshot) {\n            if (snapshot.exists()) {\n                snapshot.forEach(function (mapData) {\n\n                    var retrieveMap = db.ref(\"MapData/\" + mapData.key);\n                    retrieveMap.on('value', (snapshot) => {\n                        var data = snapshot.val();\n                        if (data !== null && data.active) {\n\n\n                            var index = 0;\n\n                            var searchOptions = [];\n\n                            for (var i = 0; i < data.mapData.length; i++) {\n\n                                if (data.mapData[i].name === \"building\") {\n                                    searchOptions.push(data.mapData[i]);\n                                    for (var j = 0; j < data.mapData[i].internal.length; j++) {\n                                        if (data.mapData[i].internal[j][0] === \"empty\") {\n                                            data.mapData[i].internal[j] = [];\n                                        }\n                                        else {\n                                            for (var k = 0; k < data.mapData[i].internal[j].length; k++) {\n                                                if (data.mapData[i].internal[j][k].name === \"room\") {\n                                                    searchOptions.push(data.mapData[i].internal[j][k]);\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    if (data.mapData[i].lifts[0] === \"empty\") {\n                                        data.mapData[i].lifts = [];\n                                    }\n\n                                    if (data.mapData[i].stairs[0] === \"empty\") {\n                                        data.mapData[i].stairs = [];\n                                    }\n                                }\n                            }\n\n\n                            for (var i = 0; i < data.mapData.length; i++) {\n                                data.mapData[i].index = index++;\n                                if (data.mapData[i].name === \"building\") {\n                                    if (data.mapData[i].entrance !== undefined) {\n                                        data.mapData[i].entrance.index = index++;\n                                    }\n\n                                    for (var j = 0; j < data.mapData[i].internal.length; j++) {\n                                        for (var k = 0; k < data.mapData[i].internal[j].length; k++) {\n                                            data.mapData[i].internal[j][k].index = index++;\n                                        }\n                                    }\n\n                                    for (var j = 0; j < data.mapData[i].lifts.length; j++) {\n                                        data.mapData[i].lifts[j].index = index++;\n                                    }\n\n                                    for (var j = 0; j < data.mapData[i].stairs.length; j++) {\n                                        data.mapData[i].stairs[j].index = index++;\n                                    }\n                                }\n\n                            }\n\n\n                            setMapData([...data.mapData]);\n                            setCategories([...data.categories]);\n                            setOptions([...searchOptions]);\n                            setShowEnterCodeModal(false);\n\n                        }\n                    })\n\n                });\n            }\n            else {\n                setRetrieveMapError(\"Map not Found\");\n            }\n        });\n\n    }\n\n\n    // Reset search, origin and destination attibutes \n    // for all buildings and internal rooms\n    function resetShapes() {\n\n        var data = mapData;\n\n        for (var i = 0; i < data.length; i++) {\n            data[i].search = false;\n            data[i].origin = false;\n            data[i].destination = false;\n            data[i].pathwayShape = false;\n\n            if (data[i].name === \"building\") {\n                for (var j = 0; j < data[i].internal.length; j++) {\n                    for (var k = 0; k < data[i].internal[j].length; k++) {\n                        if (data[i].internal[j][k].name === \"room\") {\n                            data[i].internal[j][k].search = false;\n                            data[i].internal[j][k].origin = false;\n                            data[i].internal[j][k].destination = false;\n                            data[i].internal[j][k].pathwayShape = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        setMapData([...data]);\n    }\n\n    // Which textfields to show\n    function textfieldShowHandler(stage) {\n        if (stage === 0) {\n            setShowTextFields(false);\n            setShowSearchTextField(false);\n            setShowDirectionTextFields(false);\n        }\n        else if (stage === 1) {\n            setShowTextFields(true);\n            setShowSearchTextField(true);\n            setShowDirectionTextFields(false);\n        }\n        else if (stage === 2) {\n            setShowTextFields(true);\n            setShowSearchTextField(false);\n            setShowDirectionTextFields(true);\n        }\n    }\n\n    // Search for building\n    function searchFunction() {\n        resetShapes();\n\n        var data = [...mapData];\n\n        // If searched value is building, find value and set search field to true\n        if (search.name === \"building\") {\n            for (var i = 0; i < data.length; i++) {\n                if (search.index === mapData[i].index) {\n                    data[i].search = true;\n                    break;\n                }\n            }\n        }\n\n        // If searched value is room\n        if (search.name === \"room\") {\n            // Loop through nodes\n            for (var i = 0; i < data.length; i++) {\n                // Check if node is building\n                if (data[i].name === \"building\") {\n\n                    // Loop through internal structure\n                    for (var j = 0; j < data[i].internal.length; j++) {\n\n                        // Loop through floors\n                        for (var k = 0; k < data[i].internal[j].length; k++) {\n\n                            // If found, set search field to true\n                            if (data[i].internal[j][k].index === search.index) {\n                                data[i].internal[j][k].search = true;\n\n                                // Set building clicked to index\n                                setBuildingClicked(data[i].index);\n\n                                // Show building modal\n                                setShowBuildingModal(true);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n        }\n\n        // Update map data\n        setMapData([...data]);\n\n        // Set showing result to true\n        setShowingResult(true);\n\n    }\n\n    // Get directions\n    function getDirectionsFunction() {\n        resetShapes();\n\n        // If origin and destination are buildings\n        if (origin.name === \"building\" && destination.name === \"building\") {\n\n            var originFound = false;\n            var destinationFound = false;\n\n            var data = [...mapData];\n\n            for (var i = 0; i < data.length; i++) {\n                data[i].pathwayShape = false;\n            }\n\n            for (var i = 0; i < data.length; i++) {\n\n                // If label and points of origin shape are equal, set origin field to true\n                if (!originFound && origin.index === mapData[i].index) {\n                    data[i].origin = true;\n                    originFound = true;\n                }\n\n\n                // If label and points of destination shape are equal, set destination field to true\n                if (!destinationFound && destination.index === mapData[i].index) {\n                    data[i].destination = true;\n                    destinationFound = true;\n                }\n\n                // If origin and destination found, break from loop\n                if (originFound && destinationFound) {\n                    break;\n                }\n            }\n\n            // Run dijktra and determine path\n            var visited = dijkstra_buildingToBuilding(mapData, origin, destination);\n            var path = getNodesInPathOrder(visited[visited.length - 1]);\n\n            // Loop through buildings and set pathway shapes to true\n            for (var i = 0; i < path.length; i++) {\n                for (var j = 0; j < data.length; j++) {\n                    if (path[i][0].index === data[j].index && path[i][0].name === data[j].name) {\n                        data[j].pathwayShape = true;\n                    }\n                }\n\n            }\n\n            // Update map data and set showing result to true\n            setMapData([...data]);\n            setShowingResult(true);\n            return;\n\n        }\n        else {\n\n            var nodesInPathwayOrder = [];\n            var originBuilding = null;\n            var destinationBuilding = null;\n\n            // Loop through map data\n            for (var i = 0; i < mapData.length; i++) {\n\n                // If shape is building\n                if (mapData[i].name === \"building\") {\n\n                    // Loop through internal structure of building\n                    for (var j = 0; j < mapData[i].internal.length; j++) {\n\n                        // Loop through floor\n                        for (var k = 0; k < mapData[i].internal[j].length; k++) {\n\n                            // Find building for shape\n                            if (originBuilding !== null && destinationBuilding !== null) {\n                                break;\n                            }\n                            if (originBuilding === null && origin.index === mapData[i].internal[j][k].index) {\n                                originBuilding = mapData[i];\n                            }\n                            else if (destinationBuilding === null && destination.index === mapData[i].internal[j][k].index) {\n                                destinationBuilding = mapData[i];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // If origin and destination are both rooms\n            if (origin.name === \"room\" && destination.name === \"room\") {\n\n                // Get path from origin to entrance of building\n                var nodes = dijkstra_roomToEntrance(mapData, origin);\n                nodesInPathwayOrder.push(getNodesInPathOrder(nodes[nodes.length - 1]));\n\n                // Get path from origin building to destination building\n                nodes = dijkstra_buildingToBuilding(mapData, originBuilding, destinationBuilding);\n                nodesInPathwayOrder.push(getNodesInPathOrder(nodes[nodes.length - 1]));\n\n                // Get path from entrance of destination building entrance to destination\n                nodes = dijkstra_roomToEntrance(mapData, destination);\n                nodesInPathwayOrder.push(getNodesInPathOrder(nodes[nodes.length - 1]));\n\n\n\n            }\n\n            // If origin is room and destination is building\n            else if (origin.name === \"room\" && destination.name === \"building\") {\n\n                // Get path from origin to entrance of building\n                var nodes = dijkstra_roomToEntrance(mapData, origin, accessibility);\n                nodesInPathwayOrder.push(getNodesInPathOrder(nodes[nodes.length - 1]));\n\n                // Get path from origin building to destination\n                nodes = dijkstra_buildingToBuilding(mapData, originBuilding, destination);\n                nodesInPathwayOrder.push(getNodesInPathOrder(nodes[nodes.length - 1]));\n\n            }\n            else if (origin.name === \"building\" && destination.name === \"room\") {\n\n                // Get path from origin to destination building\n                nodes = dijkstra_buildingToBuilding(mapData, origin, destinationBuilding);\n                nodesInPathwayOrder.push(getNodesInPathOrder(nodes[nodes.length - 1]));\n\n                // Get path from destination building entrance to destination\n                nodes = dijkstra_roomToEntrance(mapData, destination, accessibility);\n                nodesInPathwayOrder.push(getNodesInPathOrder(nodes[nodes.length - 1]));\n\n            }\n\n            setShowingResult(true);\n            setShowRouteFinderCarousel(true);\n\n            setPathwayShapes([...nodesInPathwayOrder]);\n\n        }\n\n    }\n\n    // Handler for back button\n    function backButtonHandler() {\n        textfieldShowHandler(0);\n        resetShapes();\n        setShowingResult(false);\n    }\n\n    // Handler for clicking on building\n    function buildingClickHandler(buildingIndex) {\n        for (var i = 0; i < mapData.length; i++) {\n            if (mapData[i].index === buildingIndex) {\n                setBuildingClicked(i);\n                setShowBuildingModal(true);\n                break;\n            }\n\n        }\n\n    }\n\n    function searchDirectionOptions() {\n        return (\n            <React.Fragment>\n                {!showTextFields &&\n                    <React.Fragment>\n                        <Fab color=\"primary\" variant=\"extended\" className={classes.paperComponent} onClick={() => textfieldShowHandler(1)}>\n                            <SearchIcon style={{ marginRight: 1 }} />\n                            Search\n                        </Fab>\n\n                        <br />\n\n                        <Fab color=\"primary\" variant=\"extended\" className={classes.paperComponent} onClick={() => textfieldShowHandler(2)}>\n                            <FontAwesomeIcon icon={faRoute} style={{ fontSize: 17, marginRight: 5 }} />\n                            Find Route\n                        </Fab>\n                    </React.Fragment>\n                }\n\n                {showTextFields && showSearchTextField &&\n\n                    <React.Fragment>\n                        <Fab color=\"secondary\" variant=\"extended\" className={classes.paperComponent} onClick={backButtonHandler}>\n                            <FontAwesomeIcon icon={faChevronCircleLeft} style={{ fontSize: 17, marginRight: 5 }} />\n                            Back\n                        </Fab>\n\n                        <br />\n\n                        {mapData &&\n                            <Autocomplete\n                                className={classes.paperComponent}\n                                style={{ width: 300, backgroundColor: \"white\" }}\n                                options={options}\n                                autoHighlight\n                                getOptionLabel={(option) => option.label}\n                                renderOption={(option) => (\n                                    option.label\n                                )}\n                                onChange={(event, newValue) => {\n                                    setSearch(newValue);\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        style={{ padding: 0, margin: 0 }}\n                                        label=\"Search For A Building\"\n                                        variant=\"outlined\"\n                                        inputProps={{\n                                            ...params.inputProps,\n                                            // autoComplete: 'new-password', // disable autocomplete and autofill\n                                        }}\n                                    />\n                                )}\n                            />\n                        }\n\n\n                        <Fab color=\"primary\" variant=\"extended\" className={classes.paperComponent} onClick={searchFunction}>\n                            <SearchIcon style={{ marginRight: 1 }} />\n                            Search\n                        </Fab>\n                    </React.Fragment>\n\n                }\n\n                {showTextFields && showDirectionTextFields &&\n\n                    <React.Fragment>\n                        <Fab color=\"secondary\" variant=\"extended\" className={classes.paperComponent} onClick={backButtonHandler}>\n                            <FontAwesomeIcon icon={faChevronCircleLeft} style={{ fontSize: 17, marginRight: 5 }} />\n                            Back\n                        </Fab>\n\n                        <br />\n\n                        {mapData &&\n                            <Autocomplete\n                                className={classes.paperComponent}\n                                style={{ width: 300, backgroundColor: \"white\" }}\n                                options={options}\n                                autoHighlight\n                                getOptionLabel={(option) => option.label}\n                                renderOption={(option) => (\n                                    option.label\n                                )}\n                                onChange={(event, newValue) => {\n                                    setOrigin(newValue);\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Origin\"\n                                        variant=\"outlined\"\n                                        inputProps={{\n                                            ...params.inputProps,\n                                            autoComplete: 'new-password', // disable autocomplete and autofill\n                                        }}\n                                    />\n                                )}\n                            />\n                        }\n\n\n\n                        {mapData &&\n                            <Autocomplete\n                                className={classes.paperComponent}\n                                style={{ width: 300, backgroundColor: \"white\" }}\n                                options={options}\n                                autoHighlight\n\n                                getOptionLabel={(option) => option.label}\n                                renderOption={(option) => (\n                                    option.label\n                                )}\n                                onChange={(event, newValue) => {\n                                    setDestination(newValue);\n                                }}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        color=\"primary\"\n                                        label=\"Destination\"\n                                        variant=\"outlined\"\n                                        inputProps={{\n                                            ...params.inputProps,\n                                            autoComplete: 'new-password', // disable autocomplete and autofill\n                                        }}\n                                    />\n                                )}\n                            />\n                        }\n\n                        <FormControlLabel\n                            className={classes.paperComponent}\n                            control={\n                                <Checkbox\n                                    name=\"checkedI\"\n                                    onChange={(event) => setAccessibility(event.target.checked)}\n                                    color=\"primary\"\n                                />\n                            }\n                            label=\"Step Free Access\"\n                        />\n\n                        <br />\n\n                        <Fab color=\"primary\" variant=\"extended\" className={classes.paperComponent} onClick={getDirectionsFunction}>\n                            <FontAwesomeIcon icon={faRoute} style={{ fontSize: 17, marginRight: 5 }} />\n                            Get Directions\n                        </Fab>\n                    </React.Fragment>\n\n                }\n            </React.Fragment>\n        );\n    }\n\n    const theme = useTheme();\n\n    // Check if device is a mobile device\n    const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n    return (\n        <React.Fragment>\n            <NavBar />\n            <div style={{ marginTop: 56 }}>\n                {!showEnterCodeModal &&\n                    <React.Fragment>\n\n                        {!isMobile &&\n                            <div className={classes.paper}>\n\n                                {searchDirectionOptions()}\n\n                            </div>\n\n                        }\n                        <ViewMapCanvas clickHandler={buildingClickHandler} showingResult={showingResult} shapes={mapData} categories={categories} />\n\n                        {showBuildingModal &&\n                            <ViewBuildingModal handleClose={() => { setShowBuildingModal(false) }} building={mapData[buildingClicked]} categories={categories} showingResult={showingResult} />\n                        }\n\n                        {showRouteFinderCarousel &&\n                            <RouteFinderCarousel pathway={pathwayShapes} origin={origin} destination={destination} mapData={mapData} categories={categories} handleClose={() => { setShowRouteFinderCarousel(false) }} />\n                        }\n\n                        {categories !== null && <CategoryLegend categories={categories} />}\n\n                        {isMobile && !showSearchDrawer &&\n                            <Button style={{ position: \"absolute\", bottom: 0, width: \"100%\" }} variant=\"contained\" color=\"primary\" onClick={() => setShowSearchDrawer(true)}>\n                                Search\n                            </Button>\n                        }\n\n                        {isMobile && showSearchDrawer &&\n\n                            <Modal\n                                aria-labelledby=\"transition-modal-title\"\n                                aria-describedby=\"transition-modal-description\"\n                                open={true}\n                                onClose={() => setShowSearchDrawer(false)}\n                            >\n                                <div className={classes.modalContent}>\n                                    <Button onClick={() => setShowSearchDrawer(false)} style={{ position: \"absolute\", top: 0, right: 0, margin: 10 }}>X</Button>\n\n                                    <Paper className={classes.centerPaper}>\n                                        {searchDirectionOptions()}\n                                    </Paper>\n                                </div>\n                            </Modal>\n                        }\n                    </React.Fragment>\n                }\n\n                {showEnterCodeModal &&\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        open={true}\n                        id={\"enterCodeModal\"}\n                    >\n                        <div className={classes.modalContent}>\n\n                            <h2>Enter Code</h2>\n                            <TextField error={retrieveMapError === \"\" ? false : true} helperText={retrieveMapError} className={classes.formTextfield} id=\"enterMapCode\" label=\"Enter Code\" variant=\"outlined\" onChange={(event) => setMapCode(event.target.value)} />\n                            <br />\n                            <Button style={{ marginLeft: 7 }} id={\"retrieveMap\"} variant=\"contained\" color=\"primary\" onClick={retrieveMap}>Retrieve Map</Button>\n\n                        </div>\n                    </Modal>\n\n                }\n            </div>\n\n        </React.Fragment>\n\n    );\n\n}\n\nexport default ViewMapPage;","import React, { useState, useEffect } from 'react';\n\nimport {\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Checkbox,\n    Button,\n    Tooltip\n} from '@material-ui/core';\n\nimport {\n    SpeedDial,\n    SpeedDialIcon,\n    SpeedDialAction\n} from '@material-ui/lab';\n\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nimport Firebase from '../../utils/firebase';\nimport { loggedInUser } from '../../utils/userState';\nimport { setMap } from '../../utils/mapState';\nimport { Redirect } from 'react-router';\n\nimport { useStyles } from '../style';\n\nconst AdminPageTable = (props) => {\n\n    const classes = useStyles();\n    const [allMaps, setAllMaps] = useState([]);\n    const [redirect, setRedirect] = useState(false);\n    const [showSpeedDialOptions, setShowSpeedDialOptions] = useState(false);\n\n    var user = loggedInUser.use();\n\n    useEffect(() => {\n        setMap(null);\n        var db = Firebase.database();\n        var data = db.ref(\"MapData/\");\n\n        if (user !== null) {\n            data.orderByChild('userID').equalTo(user.uid).on(\"value\", function (snapshot) {\n                var maps = [];\n                snapshot.forEach(function (data) {\n\n                    var retrieveMap = db.ref(\"MapData/\" + data.key);\n                    retrieveMap.on('value', (snapshot) => {\n                        maps.push([data.key, snapshot.val()]);\n                        setAllMaps([...maps]);\n                    })\n\n                });\n            });\n\n        };\n\n    }, []);\n\n    function changeActivePropertyOfMap(key) {\n        var db = Firebase.database();\n        var currentActiveProperty = false;\n\n        for (var i = 0; i < allMaps.length; i++) {\n            if (allMaps[i][0] === key) {\n                currentActiveProperty = allMaps[i][1][\"active\"];\n                break;\n            }\n        }\n\n        db.ref(\"MapData/\" + key).update({\n            active: !currentActiveProperty\n        })\n    }\n\n    function deleteMap(key) {\n        var db = Firebase.database();\n        db.ref(\"MapData/\" + key).remove();\n        var map = allMaps\n        for (var i = 0; i < map.length; i++) {\n            if (map[i][0] === key) {\n                map.splice(i);\n                break;\n\n            }\n        }\n\n        setAllMaps([...map]);\n\n    }\n\n    function editMap(key) {\n        for (var i = 0; i < allMaps.length; i++) {\n            if (allMaps[i][0] === key) {\n                setMap(allMaps[i]);\n                setRedirect(true);\n                break;\n            }\n        }\n\n\n    }\n\n    function createMapPageRedirect() {\n        if (redirect) {\n            return <Redirect to='/createmap' />;\n        }\n    }\n\n    return (\n        <React.Fragment>\n\n\n            <Paper className={classes.centerPaper}>\n\n                {createMapPageRedirect()}\n                <h2>Admin</h2>\n                <TableContainer component={Paper} elevation={5}>\n\n                    <Table id={\"mapListTable\"} className={classes.table} >\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"center\">Name</TableCell>\n                                <TableCell align=\"center\">Code</TableCell>\n                                <TableCell align=\"center\">Created On</TableCell>\n                                <TableCell align=\"center\">Last Updated</TableCell>\n                                <TableCell align=\"center\">Active</TableCell>\n                                <TableCell align=\"center\"></TableCell>\n                                <TableCell align=\"center\"></TableCell>\n\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {allMaps.map((map, key) => {\n\n                                if (map[1] !== null) {\n                                    return (\n                                        <TableRow id={\"mapRow\" + key} key={\"mapRow\" + key}>\n\n                                            <TableCell id={\"mapRow\" + key + \"Name\"} component=\"th\" scope=\"row\">\n                                                {map[1][\"mapName\"]}\n                                            </TableCell>\n                                            <TableCell id={\"mapRow\" + key + \"Code\"} component=\"th\" scope=\"row\">\n                                                {map[1][\"code\"]}\n                                            </TableCell>\n                                            <TableCell id={\"mapRow\" + key + \"Created\"} component=\"th\" scope=\"row\">\n                                                {map[1][\"createdDate\"]}\n                                            </TableCell>\n                                            <TableCell id={\"mapRow\" + key + \"Updated\"} component=\"th\" scope=\"row\">\n                                                {map[1][\"updatedDate\"]}\n                                            </TableCell>\n                                            <TableCell id={\"mapRow\" + key + \"Active\"} component=\"th\" scope=\"row\">\n                                                <Checkbox\n                                                    checked={map[1][\"active\"]}\n                                                    onChange={() => { changeActivePropertyOfMap(map[0]) }}\n                                                    name=\"active\"\n                                                />\n                                            </TableCell>\n                                            <TableCell id={\"mapRow\" + key + \"EditButton\"} component=\"th\" scope=\"row\">\n                                                <Tooltip title=\"Edit Map\" placement=\"bottom\" arrow>\n                                                    <Button onClick={() => { editMap(map[0]) }} variant=\"contained\"><EditIcon fontSize=\"small\" /></Button>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <TableCell id={\"mapRow\" + key + \"DeleteButton\"} component=\"th\" scope=\"row\">\n                                                <Tooltip title=\"Delete Map\" placement=\"bottom\" arrow>\n                                                    <Button onClick={() => deleteMap(map[0])} variant=\"contained\"><FontAwesomeIcon icon={faTrashAlt} style={{ margin: \"auto\", color: \"#FF0000\", fontSize: 17 }} /></Button>\n                                                </Tooltip>\n                                            </TableCell>\n\n                                        </TableRow>\n                                    )\n                                }\n                            })}\n\n\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n\n\n            </Paper>\n\n            <SpeedDial\n                ariaLabel=\"\"\n                id={\"speedDialButton\"}\n                className={classes.speedDial}\n                // hidden={hidden}\n                icon={<SpeedDialIcon />}\n                onClose={() => setShowSpeedDialOptions(false)}\n                onOpen={() => setShowSpeedDialOptions(true)}\n                onClick={() => setShowSpeedDialOptions(true)}\n                open={showSpeedDialOptions}\n                direction={\"up\"}\n            >\n                <SpeedDialAction\n                    button\n                    id={\"createNewMap\"}\n                    key={\n                        \"New Map\"\n                    }\n                    icon={<AddBoxIcon />}\n                    tooltipTitle={\"Create New Map\"}\n                    onClick={() => {\n                        setMap(null);\n                        setRedirect(true);\n                    }}\n                />\n\n            </SpeedDial>\n        </React.Fragment>\n    )\n}\n\nexport default AdminPageTable;","import React from 'react';\n\nimport NavBar from '../../components/NavBar';\nimport AdminPageTable from '../../components/AdminMapTable';\n\nimport { Redirect } from 'react-router-dom';\n\nimport { loggedInUser } from '../../utils/userState';\n\nimport { useStyles } from '../style.js';\n\nconst AdminPage = (props) => {\n    const classes = useStyles();\n    function checkLoggedIn() {\n        if (loggedInUser.use() === null) {\n            return <Redirect to='/' />;\n        }\n    }\n    \n    return (\n        <div className={classes.page}>\n            {checkLoggedIn()}\n            <NavBar />\n            <AdminPageTable />\n        </div>\n    );\n};\n\nexport default AdminPage;","import logo from './logo.svg';\nimport './App.css';\n\nimport HomePage from './pages/HomePage';\nimport CreateMapPage from './pages/CreateMapPage';\nimport ViewMapPage from './pages/ViewMapPage';\nimport AdminPage from './pages/AdminPage';\n\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from 'react-router-dom';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Switch>\n                    <Route path=\"/createmap\"><CreateMapPage /></Route>\n                </Switch>\n                <Switch>\n                    <Route path=\"/viewmap\"><ViewMapPage /></Route>\n                </Switch>\n                <Switch>\n                    <Route path=\"/admin\"><AdminPage /></Route>\n                </Switch>\n                <Switch>\n                    <Route path=\"/\" exact><HomePage /></Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n//   <React.StrictMode>\n    <App />,\n//   </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}